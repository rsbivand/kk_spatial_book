##############################################
#Applied Spatial Statistics and Econometrics: Data Analysis in R (Routledge, 2020) 
#Przestrzenne metody ilościowe w R: statystyka, ekonometria, uczenie maszynowe, analiza danych (CeDeWu, 2020)
#Editor: Katarzyna Kopczewska 
#Authors: Katarzyna Kopczewska, Maria Kubara, Piotr Ćwiakowski, Mateusz Kopyt, Piotr Wójcik, Alessandro Festi, Kateryna Zabarina
#This book is a part of project supported by the Polish National Science Center (NCN) on „Spatial econometric models with fixed and changing neighborhood structure. Application for real estate valuation and business location” (OPUS 12, contract no. UMO-2016/23/B/ HS4/02363).
#All sample data used in the book and the codes presented in the content of the book were placed on https://github.com/kkopczewska/spatial_book 
##############################################

#Chapter 11
#Spatial unsupervised learning – applications of market basket analysis in geomarketing
#Alessandro Festi, orcid.org/0000-0003-3739-4106

#11.1 Introduction to market basket analysis 
#11.2 Data needed in spatial market basket analysis

x <- runif(50, -1,1) # Inputs uniformly distributed [-1,1]
y <- 3*x + 5plot(x, y, xlim=range(x), ylim=range(y), xlab="x", ylab="y",pch=16)
lines(x[order(x)], y[order(x)], xlim=range(x), ylim=range(y), pch=16)

y2 <- 12*x^4 - 10*x^2 + x - 4 
plot(x, y2, xlim=range(x), ylim=range(y2), xlab="x", ylab="y2", pch=16)
lines(x[order(x)], y2[order(x)], xlim=range(x), ylim=range(y2), pch=16)

y3 <- 2*x^7 + 7
plot(x, y3, xlim=range(x), ylim=range(y3), xlab="x", ylab="y3", pch=16)
lines(x[order(x)], y3[order(x)], xlim=range(x), ylim=range(y3), pch=16)

#11.3 Simulation of data

# A set of 20 random points representing the central location
points<-as.data.frame(cbind(rnorm(20)/250+11.342220, rnorm(20)/250+44.493674))

r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
UI <- fluidPage(
  leafletOutput("mymap"),
  p(),
  actionButton("recalc", "New points")
)

server <- function(input, output, session) {  
  points <- eventReactive(input$recalc, {
  points  
  }, ignoreNULL = FALSE)                                  
  output$mymap <- renderLeaflet({
    leaflet() %>%
      addProviderTiles(providers$Stamen.TonerLite,
                       options = providerTileOptions(noWrap = TRUE)
      ) %>%
      addMarkers(data = points())
  })
}
shinyApp(UI, server)

# Setting parameters
n_individuals <- 20
n_paths <- 10
n_locations <- 10
points <- data.matrix(cbind(rnorm(n_individuals)/200 + 11.342220, rnorm(n_individuals)/200 + 44.493674)) 
correlation <- 0.7

# Defining path-generator function
paths_gen <- function(points) {
  paths_one <- c()
    for (j in 1:nrow(points)) {  
       for (i in 1:n_paths) {           
         mu <- rep(0,n_locations) 
         Sigma <- matrix(correlation, nrow=n_locations, ncol=n_locations) + diag(n_locations)*.3
         rawvars <- mvrnorm(n=n_locations, mu=mu, Sigma=Sigma) 
         geo_points <- as.data.frame(cbind(rawvars[,i]/250 + as.double(points[j]), rawvars[,i]/250 + as.double(points[j+nrow(points)])))
         gg <- cbind(geo_points, i, j)
         paths_one <- rbind(paths_one, gg)
       }
    }  
  return(as.data.frame(paths_one))
}

# Applying path-generator function to generated points
paths <- paths_gen(points)

#11.4 The market basket analysis technique applied to geolocation data

# Reading Iperbole dataset
dataset= pd.read_csv("elenco_esercizi_commercio_in_sede_fissa_anno_2018.csv", sep = ';', header='infer', encoding='latin-1')

# Pasting, for each commercial activity, the variables “street”, “address” and the city (Bologna) to create a new variable from which latitude and longitude can be inferred 
dataset['quartiere_settore']=dataset.ESERCIZIO_VIA+' '+dataset.ESERCIZIO_CIVICO+' '+dataset.QUARTIERE+' Bologna'

dataset['lat'] = float
dataset['lon'] = float

# Importing Mapbox token
token = yourtoken
geocoder = Geocoder(access_token=token)

# Defining mapbox geocoding function
def mapbox_geocode(dataset):
  for i in range(len(dataset)):
      try:
          response = geocoder.forward(dataset.quartiere_settore[i])
          response = response.content
          response = json.loads(response)
          coordinates = response["features"][0]['geometry']['coordinates']
          dataset.iat[i,29] = coordinates[1]
          dataset.iat[i,30] = coordinates[0]
      except:
          dataset.iat[i,29] = np.nan
          dataset.iat[i,30] = np.nan
  return(dataset)
   
# Applying mapbox geocoding function to the Iperbole dataset
geocoded_dataset = mapbox_geocode(dataset)

# Defining minimum distance
min_dist <- 0.0003

# Defining function to assign individual positions 
# to the geocoded commercial activities from the Iperbole dataset
assign <- function(geo_points) {
  geo_pointsTOplaces <- list()
    for(j in 1:nrow(path_v)) {
        x <- spDistsN1(places,path_v[j,], longlat = FALSE)
        x <- as.data.frame(x)
        dist <- which(x == min(x), arr.ind = TRUE)
        dist <- as.data.frame(dist) 
        nearest <- sort(x[x>0],decreasing=F)[1]
        geo_pointsTOplaces$distance[j] <- nearest
        if (nearest < min_dist) { 
          geo_pointsTOplaces$lon[j] <- places[dist[1,1],1]
          geo_pointsTOplaces$lat[j] <- places[dist[1,1],2]
        } else {
          geo_pointsTOplaces$lon[j] <- NA
          geo_pointsTOplaces$lat[j] <- NA 
        }
      }
  return(geo_pointsTOplaces)

head(dataset, 10) # full dataset with Nas
dataset = na.omit(dataset)
head(dataset, 10) # limited dataset, without Nas

Final<-merge(x=dataset, y=places, by.x = c(long,lat), by.y = c(long,lat))
head(final, 10)
 
#11.5 Spatial association rules 

transactionData <- ddply(final, c(itemset_customer),
                 function(final)paste(final$ID, collapse=,)) 

Tr <- read.transactions(transactionData, format=’basket’, sep=’,’)

library(RcolorBrewer)
iitemFrequencyPlot(tr, topN=20, type=’absolute’, col=brewer.pal(8,’Pastel2’), main=’Absolute Item Frequency Plot’)

association.rules<-apriori(tr, parameter=list(supp=0.03, conf=0.5, maxlen=10)) 
summary(association.rules)

rules <- head(association.rules, n=5, by=support)
inspect(rules)

plot(association.rules[1:100], method=graph)
plot(association.rules[1:20], method=graph)

#11.6 Applications to geomarketing
#11.6.1	Finding the best location for a business
#11.6.2	Targeting
#11.6.3	Discovery of competitors
#11.7 Conclusions and further approaches










