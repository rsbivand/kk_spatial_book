
> sink(zz, type = "message")

> ##############################################
> #Applied Spatial Statistics and Econometrics: Data Analysis in R (Routledge, 2020) 
> #Przestrzenne .... [TRUNCATED] 

> sub<-data[data$year==2017, ]

> sub$y<-sub$XA14

> sub$x1<-sub$XA08/sub$XA09

> sub$x2<-sub$XA13

> sub$x3<-(sub$XA05/sub$XA06)/mean(sub$XA05/sub$XA06)

> sub$x4<-(sub$XA18+sub$XA19+sub$XA20)/sub$XA15

> sub$x5<-sub$XA16/sub$XA15

> sub$x6<-sub$XA15/sub$XA06

> sub$x7<-sub$dist

> sub$x8<-sub$XA10/mean(sub$XA10)

> sub$x9<-sub$XA21

> eq1<-y~x1+x2+x3+x4+x5+x6+x7+x8+x9  # equation for the estimation 

> regdata<-sub[,c("y", "x1", "x2", "x3", "x4", "x5","x6", "x7", "x8", "x9")]

> library(PerformanceAnalytics)
Loading required package: xts
Loading required package: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric


Attaching package: 'PerformanceAnalytics'

The following object is masked from 'package:graphics':

    legend


> chart.Correlation(regdata, histogram=TRUE, pch=19) # Fig.5.3
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter
Warning in par(usr) : argument 1 does not name a graphical parameter

> model.lm<-lm(eq1, data=sub)

> summary(model.lm)

Call:
lm(formula = eq1, data = sub)

Residuals:
    Min      1Q  Median      3Q     Max 
-27.040  -4.659  -1.156   3.342  75.219 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept)  89.453667   7.225117  12.381  < 2e-16 ***
x1           -3.868098   1.377277  -2.809  0.00524 ** 
x2            0.002061   0.001811   1.138  0.25581    
x3            4.547280   1.540568   2.952  0.00336 ** 
x4           -1.479978   8.569714  -0.173  0.86298    
x5          -20.336263   4.559384  -4.460 1.09e-05 ***
x6           38.753277   9.610871   4.032 6.71e-05 ***
x7           -0.062031   0.015654  -3.963 8.90e-05 ***
x8           -0.346144   0.440771  -0.785  0.43277    
x9           -0.015593   0.150482  -0.104  0.91753    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 9.011 on 370 degrees of freedom
Multiple R-squared:  0.3949,	Adjusted R-squared:  0.3802 
F-statistic: 26.83 on 9 and 370 DF,  p-value: < 2.2e-16


> library(spdep)
Loading required package: spData
Loading required package: sf
Linking to GEOS 3.12.0, GDAL 3.7.2, PROJ 9.3.0; sf_use_s2() is TRUE

> library(spatialreg)
Loading required package: Matrix

Attaching package: 'spatialreg'

The following objects are masked from 'package:spdep':

    get.ClusterOption, get.coresOption, get.mcOption,
    get.VerboseOption, get.ZeroPolicyOption, set.ClusterOption,
    set.coresOption, set.mcOption, set.VerboseOption,
    set.ZeroPolicyOption


> library(rgdal)
Loading required package: sp
Please note that rgdal will be retired during October 2023,
plan transition to sf/stars/terra functions using GDAL and PROJ
at your earliest convenience.
See https://r-spatial.org/r/2023/05/15/evolution4.html and https://github.com/r-spatial/evolution
rgdal: version: 1.6-7, (SVN revision 1203)
Geospatial Data Abstraction Library extensions to R successfully loaded
Loaded GDAL runtime: GDAL 3.7.2, released 2023/09/05
Path to GDAL shared files: /usr/local/share/gdal
 GDAL does not use iconv for recoding strings.
GDAL binary built with GEOS: TRUE 
Loaded PROJ runtime: Rel. 9.3.0, September 1st, 2023, [PJ_VERSION: 930]
Path to PROJ shared files: /home/rsb/.local/share/proj:/usr/local/share/proj:/usr/local/share/proj
PROJ CDN enabled: FALSE
Linking to sp version:2.1-0
To mute warnings of possible GDAL/OSR exportToProj4() degradation,
use options("rgdal_show_exportToProj4_warnings"="none") before loading sp or rgdal.

> pov<-readOGR(".", "powiaty", stringsAsFactors=TRUE, integer64="allow.loss") # 380 units
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
OGR data source with driver: ESRI Shapefile 
Source: "/home/rsb/presentations/kk_spatial_book", layer: "powiaty"
with 380 features
It has 29 fields

> pov<- spTransform(pov, CRS("OGC:CRS84"))
Warning: PROJ support is provided by the sf and terra packages among others

> cont.nb<-poly2nb(as(pov, "SpatialPolygons")) 	# from the spdep:: package

> cont.listw<-nb2listw(cont.nb, style="W")		# from the spdep:: package

> # Manski model (all three spatial coefficients)
> # spatial lag Y (rho)
> # spatial lags X (theta)
> # spatial autocorrelation of error (lambda)
> 
 .... [TRUNCATED] 

> summary(model.GNS, Nagelkerke=TRUE)

Call:sacsarlm(formula = eq1, data = sub, listw = cont.listw, type = "sacmixed")

Residuals:
     Min       1Q   Median       3Q      Max 
-23.3217  -4.6444  -1.1510   3.4150  72.2148 

Type: sacmixed 
Coefficients: (asymptotic standard errors) 
               Estimate  Std. Error z value  Pr(>|z|)
(Intercept)  34.7861523  17.2803984  2.0130   0.04411
x1           -3.2421965   1.6222431 -1.9986   0.04565
x2           -0.0029298   0.0023321 -1.2563   0.20902
x3            2.9950609   1.5363298  1.9495   0.05124
x4            4.0067186   8.9755505  0.4464   0.65531
x5          -20.2754769   5.0660168 -4.0023 6.274e-05
x6           59.8812716  10.5973033  5.6506 1.599e-08
x7           -0.0719491   0.0296636 -2.4255   0.01529
x8           -0.2500321   0.5307138 -0.4711   0.63755
x9           -0.0484336   0.1717766 -0.2820   0.77798
lag.x1       -0.8009746   2.3748685 -0.3373   0.73591
lag.x2        0.0038153   0.0035660  1.0699   0.28467
lag.x3        1.8476194   3.1501469  0.5865   0.55753
lag.x4       22.3269174  16.5363270  1.3502   0.17696
lag.x5       12.6373130   8.0485407  1.5701   0.11638
lag.x6      -10.0757601  21.6853818 -0.4646   0.64219
lag.x7        0.0593318   0.0422366  1.4047   0.16010
lag.x8       -0.1929781   0.9774509 -0.1974   0.84349
lag.x9        0.2389813   0.2461626  0.9708   0.33163

Rho: 0.40246
Asymptotic standard error: 0.19302
    z-value: 2.085, p-value: 0.037069
Lambda: -0.24525
Asymptotic standard error: 0.24441
    z-value: -1.0034, p-value: 0.31566

LR test value: 32.79, p-value: 0.00056905

Log likelihood: -1353.154 for sacmixed model
ML residual variance (sigma squared): 69.431, (sigma: 8.3325)
Nagelkerke pseudo-R-squared: 0.44494 
Number of observations: 380 
Number of parameters estimated: 22 
AIC: NA (not available for weighted model), (AIC for lm: 2761.1)


> model.GNS$logLik_lm.model	# logLik of the OLS model and degrees of freedom of the LR test
'log Lik.' -1369.549 (df=11)

> model.GNS$LL			# logLik of the GNS model
[1] -1353.154

> # SDM model (two spatial coefficients)
> # spatial lag Y (rho ρ)
> # spatial lags X (theta θ) 
> 
> model.SDM<-lagsarlm(eq1, data=sub, listw=cont.li .... [TRUNCATED] 

> summary(model.SDM, Nagelkerke=TRUE)

Call:lagsarlm(formula = eq1, data = sub, listw = cont.listw, type = "mixed", 
    method = "LU", tol.solve = 1e-20)

Residuals:
     Min       1Q   Median       3Q      Max 
-23.7766  -4.6834  -1.2621   3.5488  72.8687 

Type: mixed 
Coefficients: (asymptotic standard errors) 
               Estimate  Std. Error z value  Pr(>|z|)
(Intercept)  50.2649769  12.6889514  3.9613 7.454e-05
x1           -3.2411464   1.5815537 -2.0493  0.040429
x2           -0.0029229   0.0022533 -1.2972  0.194570
x3            3.1224076   1.5189078  2.0557  0.039812
x4            5.9059075   8.7910066  0.6718  0.501703
x5          -19.5892388   4.9620588 -3.9478 7.887e-05
x6           59.6131561  10.5585061  5.6460 1.642e-08
x7           -0.0765630   0.0296326 -2.5837  0.009774
x8           -0.2270200   0.5173852 -0.4388  0.660818
x9           -0.0650779   0.1683102 -0.3867  0.699012
lag.x1       -2.0205822   2.2413951 -0.9015  0.367331
lag.x2        0.0038880   0.0036319  1.0705  0.284387
lag.x3        2.7588655   3.0739733  0.8975  0.369457
lag.x4       24.5049565  16.9616167  1.4447  0.148534
lag.x5        7.7160845   8.0366414  0.9601  0.336998
lag.x6        3.6485892  20.2354681  0.1803  0.856912
lag.x7        0.0590442   0.0425570  1.3874  0.165315
lag.x8       -0.3765914   1.0244115 -0.3676  0.713159
lag.x9        0.3015724   0.2555540  1.1801  0.237971

Rho: 0.2044, LR test value: 6.72, p-value: 0.0095338
Asymptotic standard error: 0.070603
    z-value: 2.8951, p-value: 0.0037906
Wald statistic: 8.3815, p-value: 0.0037906

Log likelihood: -1353.37 for mixed model
ML residual variance (sigma squared): 72.034, (sigma: 8.4873)
Nagelkerke pseudo-R-squared: 0.4443 
Number of observations: 380 
Number of parameters estimated: 21 
AIC: NA (not available for weighted model), (AIC for lm: 2753.5)
LM test for residual autocorrelation
test value: 0.24982, p-value: 0.61721


> # Manski model (all three spatial coefficients)
> # spatial lag Y (rho)
> # spatial lags X (theta)
> # spatial autocorrelation of error (lambda)
> m .... [TRUNCATED] 

> summary(model.GNS, correlation=TRUE)  

Call:sacsarlm(formula = eq1, data = sub, listw = cont.listw, type = "sacmixed")

Residuals:
     Min       1Q   Median       3Q      Max 
-23.3217  -4.6444  -1.1510   3.4150  72.2148 

Type: sacmixed 
Coefficients: (asymptotic standard errors) 
               Estimate  Std. Error z value  Pr(>|z|)
(Intercept)  34.7861523  17.2803984  2.0130   0.04411
x1           -3.2421965   1.6222431 -1.9986   0.04565
x2           -0.0029298   0.0023321 -1.2563   0.20902
x3            2.9950609   1.5363298  1.9495   0.05124
x4            4.0067186   8.9755505  0.4464   0.65531
x5          -20.2754769   5.0660168 -4.0023 6.274e-05
x6           59.8812716  10.5973033  5.6506 1.599e-08
x7           -0.0719491   0.0296636 -2.4255   0.01529
x8           -0.2500321   0.5307138 -0.4711   0.63755
x9           -0.0484336   0.1717766 -0.2820   0.77798
lag.x1       -0.8009746   2.3748685 -0.3373   0.73591
lag.x2        0.0038153   0.0035660  1.0699   0.28467
lag.x3        1.8476194   3.1501469  0.5865   0.55753
lag.x4       22.3269174  16.5363270  1.3502   0.17696
lag.x5       12.6373130   8.0485407  1.5701   0.11638
lag.x6      -10.0757601  21.6853818 -0.4646   0.64219
lag.x7        0.0593318   0.0422366  1.4047   0.16010
lag.x8       -0.1929781   0.9774509 -0.1974   0.84349
lag.x9        0.2389813   0.2461626  0.9708   0.33163

Rho: 0.40246
Asymptotic standard error: 0.19302
    z-value: 2.085, p-value: 0.037069
Lambda: -0.24525
Asymptotic standard error: 0.24441
    z-value: -1.0034, p-value: 0.31566

LR test value: 32.79, p-value: 0.00056905

Log likelihood: -1353.154 for sacmixed model
ML residual variance (sigma squared): 69.431, (sigma: 8.3325)
Number of observations: 380 
Number of parameters estimated: 22 
AIC: NA (not available for weighted model), (AIC for lm: 2761.1)

 Correlation of coefficients 
            sigma rho   lambda (Intercept) x1    x2    x3    x4    x5    x6   
rho         -0.60                                                             
lambda       0.59 -0.95                                                       
(Intercept)  0.49 -0.83  0.78                                                 
x1          -0.03  0.05 -0.04  -0.05                                          
x2          -0.02  0.03 -0.03   0.08        0.13                              
x3           0.03 -0.04  0.04   0.06       -0.29 -0.24                        
x4           0.09 -0.14  0.14   0.03        0.14 -0.53  0.06                  
x5           0.00  0.00  0.00  -0.01        0.05 -0.07  0.09  0.55            
x6           0.02 -0.03  0.02  -0.11        0.18 -0.30 -0.19  0.34 -0.04      
x7           0.01 -0.01  0.01  -0.01        0.09  0.04 -0.02 -0.01 -0.04 -0.06
x8          -0.04  0.07 -0.07  -0.05        0.18  0.00  0.06 -0.42  0.04 -0.33
x9           0.01 -0.02  0.02  -0.01        0.03  0.08  0.02 -0.11 -0.28  0.43
lag.x1      -0.26  0.44 -0.41  -0.56       -0.60 -0.08  0.17 -0.17 -0.01 -0.12
lag.x2       0.02 -0.03  0.02  -0.04       -0.03 -0.64  0.15  0.27  0.01  0.21
lag.x3       0.25 -0.43  0.40   0.39        0.08  0.11 -0.36  0.01 -0.05  0.06
lag.x4       0.15 -0.26  0.24   0.01       -0.13  0.13 -0.07 -0.33 -0.22 -0.13
lag.x5      -0.21  0.35 -0.33  -0.36       -0.03  0.03 -0.07 -0.37 -0.48 -0.11
lag.x6       0.29 -0.50  0.47   0.17       -0.12 -0.02  0.05  0.04 -0.07 -0.19
lag.x7      -0.09  0.16 -0.15  -0.17       -0.09 -0.06  0.03  0.05  0.06  0.10
lag.x8      -0.04  0.07 -0.06   0.03       -0.10  0.06 -0.01  0.17  0.01  0.20
lag.x9       0.04 -0.06  0.06  -0.06        0.03 -0.07 -0.04  0.07  0.09 -0.11
            x7    x8    x9    lag.x1 lag.x2 lag.x3 lag.x4 lag.x5 lag.x6 lag.x7
rho                                                                           
lambda                                                                        
(Intercept)                                                                   
x1                                                                            
x2                                                                            
x3                                                                            
x4                                                                            
x5                                                                            
x6                                                                            
x7                                                                            
x8           0.07                                                             
x9          -0.05 -0.06                                                       
lag.x1      -0.04 -0.11 -0.01                                                 
lag.x2      -0.02  0.02  0.03  0.08                                           
lag.x3       0.04 -0.15  0.01 -0.39  -0.31                                    
lag.x4       0.05  0.25 -0.04 -0.03  -0.53   0.22                             
lag.x5       0.05  0.04  0.04  0.20  -0.07  -0.03   0.43                      
lag.x6       0.05  0.12 -0.10 -0.11  -0.05   0.04   0.29  -0.43               
lag.x7      -0.88 -0.06  0.03  0.10  -0.02  -0.12  -0.03  -0.02  -0.06        
lag.x8      -0.10 -0.66  0.09  0.20   0.19   0.08  -0.56  -0.03  -0.37   0.13 
lag.x9       0.07  0.02 -0.55 -0.04   0.25  -0.06  -0.22  -0.37   0.43  -0.12 
            lag.x8
rho               
lambda            
(Intercept)       
x1                
x2                
x3                
x4                
x5                
x6                
x7                
x8                
x9                
lag.x1            
lag.x2            
lag.x3            
lag.x4            
lag.x5            
lag.x6            
lag.x7            
lag.x8            
lag.x9       0.02 


> # SAC model (two spatial coefficients)
> # spatial lag Y (rho)
> # spatial autocorrelation of error (lambda)
> model.SAC<-sacsarlm(eq1, data=sub, li .... [TRUNCATED] 

> # SDM model (two spatial coefficients)
> # spatial lag Y (rho ρ)
> # spatial lags X (theta θ) 
> model.SDM<-lagsarlm(eq1, data=sub, listw=cont.listw .... [TRUNCATED] 

> # SDEM model (two spatial coefficients)
> # spatial lags X (theta)
> # spatial autocorrelation of error (lambda)
> model.SDEM<-errorsarlm(eq1, data= .... [TRUNCATED] 
Warning in RET$pfunction("adjusted", ...) :
  Completion with error > abseps

> # SAR model (one spatial factor)
> # spatial lag Y (rho)
> model.SAR<-lagsarlm(eq1, data=sub, listw=cont.listw)  

> # SLX model (one spatial factor)
> # spatial lags X (theta) 
> model.SLX<-lmSLX(eq1, data=sub, listw=cont.listw)  

> # SEM model (one spatial factor)
> # spatial autocorrelation of error (lambda)
> model.SEM<-errorsarlm(eq1, data=sub, listw=cont.listw)  

> # creating time-space lag
> sub0<-data[data$year==2016, ]

> sub$y.stlag<-lag.listw(cont.listw, sub0$XA14)

> eq1<-y~x1+x2+x3+x4+x5+x6+x7+x8+x9  # form of the regression equation

> eq2<-y~x1+x2+x3+x4+x5+x6+x7+x8+x9+y.stlag  # form of the regression equation

> # SDM model (two spatial factors rho and theta)
> # additionally time-space lag y (y.stlag)
> model.SDMst<-lagsarlm(eq2, data=sub, listw=cont.listw, .... [TRUNCATED] 

> summary(model.SDMst)

Call:lagsarlm(formula = eq2, data = sub, listw = cont.listw, type = "mixed", 
    method = "LU", tol.solve = 1e-20)

Residuals:
       Min         1Q     Median         3Q        Max 
-34.882274  -3.740133  -0.051281   3.336532  49.633717 

Type: mixed 
Coefficients: (asymptotic standard errors) 
               Estimate  Std. Error z value  Pr(>|z|)
(Intercept) -6.7543e+01  1.3379e+01 -5.0484 4.455e-07
x1          -2.2941e+00  1.2825e+00 -1.7888  0.073647
x2           3.6910e-04  1.8322e-03  0.2015  0.840342
x3           2.9828e+00  1.2290e+00  2.4269  0.015229
x4          -3.6600e+00  7.1211e+00 -0.5140  0.607274
x5          -1.3000e+01  4.0304e+00 -3.2255  0.001258
x6           4.3705e+01  8.6038e+00  5.0797 3.780e-07
x7          -5.6209e-02  2.4051e-02 -2.3370  0.019437
x8          -2.7610e-02  4.1811e-01 -0.0660  0.947351
x9           3.1213e-02  1.3605e-01  0.2294  0.818543
y.stlag     -4.7036e-01  1.1042e-01 -4.2596 2.048e-05
lag.x1       3.2276e+00  1.8469e+00  1.7476  0.080536
lag.x2      -6.5557e-04  2.9474e-03 -0.2224  0.823987
lag.x3       5.4103e-01  2.5183e+00  0.2148  0.829889
lag.x4       1.0580e+01  1.3808e+01  0.7662  0.443559
lag.x5      -3.0899e+00  6.5710e+00 -0.4702  0.638192
lag.x6       4.3179e+01  1.7255e+01  2.5025  0.012332
lag.x7       6.3403e-02  3.4589e-02  1.8331  0.066794
lag.x8      -1.2621e+00  8.3097e-01 -1.5188  0.128812
lag.x9       5.9513e-01  2.0743e-01  2.8690  0.004117
lag.y.stlag  1.8550e+00  1.3403e-01 13.8401 < 2.2e-16

Rho: 0.027698, LR test value: 0.057589, p-value: 0.81035
Asymptotic standard error: 0.07208
    z-value: 0.38427, p-value: 0.70078
Wald statistic: 0.14766, p-value: 0.70078

Log likelihood: -1270.304 for mixed model
ML residual variance (sigma squared): 46.89, (sigma: 6.8476)
Number of observations: 380 
Number of parameters estimated: 23 
AIC: NA (not available for weighted model), (AIC for lm: 2584.7)
LM test for residual autocorrelation
test value: 57.95, p-value: 2.6867e-14


> # impacts dla SDM
> model.SDM<-lagsarlm(eq1, data=sub, listw=cont.listw, type="mixed", tol.solve=1.0e-20, method="LU")  

> W.c<-as(as_dgRMatrix_listw(cont.listw), "CsparseMatrix") 

> trMat<-trW(W.c, type="mult") 

> model.SDM.imp<-impacts(model.SDM, tr=trMat, R=2000)

> summary(model.SDM.imp, zstats=TRUE, short=TRUE)
Impact measures (mixed, trace):
         Direct     Indirect         Total
x1  -3.34889332 -3.264645588  -6.613538905
x2  -0.00279077  0.004003842   0.001213072
x3   3.25882788  4.133425024   7.392252900
x4   6.93845516 31.285376961  38.223832121
x5 -19.44017089  4.516640330 -14.923530557
x6  60.24899959 19.265555821  79.514555410
x7  -0.07482039  0.052800716  -0.022019673
x8  -0.24400665 -0.514680894  -0.758687545
x9  -0.05350155  0.350754660   0.297253108
========================================================
Simulation results ( variance matrix):
========================================================
Simulated standard errors
         Direct     Indirect        Total
x1  1.556592228  2.465072269  2.349215405
x2  0.002168813  0.004265102  0.004110181
x3  1.492168822  3.722267016  3.933276608
x4  8.785115958 20.209310373 21.938506619
x5  4.986944194  9.360384457  9.886923953
x6 10.417989838 24.273475695 27.504862437
x7  0.028419101  0.045993221  0.030301572
x8  0.499295998  1.172086679  1.052924602
x9  0.165154394  0.295524217  0.308053167

Simulated z-values:
       Direct   Indirect      Total
x1 -2.1628736 -1.2764922 -2.7725673
x2 -1.2802817  0.9332249  0.2928356
x3  2.2046238  1.1352030  1.9106715
x4  0.7819950  1.5415354  1.7331756
x5 -3.8991434  0.4801312 -1.5121587
x6  5.7827695  0.8214771  2.9153004
x7 -2.6474135  1.1429517 -0.7481157
x8 -0.5068494 -0.4409627 -0.7312152
x9 -0.3088786  1.1798853  0.9663008

Simulated p-values:
   Direct     Indirect Total    
x1 0.030551   0.20178  0.0055616
x2 0.200446   0.35070  0.7696478
x3 0.027481   0.25629  0.0560468
x4 0.434218   0.12319  0.0830645
x5 9.6534e-05 0.63113  0.1304935
x6 7.3481e-09 0.41137  0.0035535
x7 0.008111   0.25306  0.4543904
x8 0.612260   0.65924  0.4646477
x9 0.757414   0.23805  0.3338937

> a<-model.SDM.imp$res$direct	# direct effects only

> b<-model.SDM.imp$res$indirect	# only indirect effects

> c<-model.SDM.imp$res$total	# only total effects

> a/c 					# share of direct effect in the total
        x1         x2         x3         x4         x5         x6         x7 
 0.5063693 -2.3005798  0.4408437  0.1815217  1.3026523  0.7577103  3.3978882 
        x8         x9 
 0.3216168 -0.1799865 

> abs(a)/abs(b)		# relation of direct to indirect effects
       x1        x2        x3        x4        x5        x6        x7        x8 
1.0258061 0.6970229 0.7884086 0.2217795 4.3041220 3.1272910 1.4170336 0.4740931 
       x9 
0.1525327 

> #5.2.2 Quality assessment of spatial models 
> #5.2.2.1 Information criteria and pseudo R2 in assessing model fit
> 
> # SAR model (one spatial fact .... [TRUNCATED] 

> AIC(model.SAR)
[1] 2748.24

> BIC(model.SAR)
[1] 2795.522

> attributes(model.SAR)
$names
 [1] "type"            "dvars"           "rho"             "coefficients"   
 [5] "rest.se"         "LL"              "s2"              "SSE"            
 [9] "parameters"      "logLik_lm.model" "AIC_lm.model"    "method"         
[13] "call"            "residuals"       "opt"             "tarX"           
[17] "tary"            "y"               "X"               "fitted.values"  
[21] "se.fit"          "similar"         "ase"             "rho.se"         
[25] "LMtest"          "resvar"          "zero.policy"     "aliased"        
[29] "listw_style"     "interval"        "fdHess"          "optimHess"      
[33] "insert"          "trs"             "LLNullLlm"       "timings"        
[37] "f_calls"         "hf_calls"        "intern_classic" 

$class
[1] "Sarlm"


> model.SAR$AIC_lm.model
[1] 2761.098

> logLik(model.SAR)
'log Lik.' -1362.12 (df=12)

> model.SAR$LL
         [,1]
[1,] -1362.12

> AIC(model.SDM, model.SAR, model.lm)  # AIC information criteria
          df      AIC
model.SDM 21 2748.741
model.SAR 12 2748.240
model.lm  11 2761.098

> BIC(model.SDM, model.SAR, model.lm)  # BIC information criteria
          df      BIC
model.SDM 21 2831.484
model.SAR 12 2795.522
model.lm  11 2804.440

> anova(model.SDM, model.SAR, model.lm)  # comparison of AIC and logLik 
          Model df    AIC  logLik Test L.Ratio  p-value
model.SDM     1 21 2748.7 -1353.4    1                 
model.SAR     2 12 2748.2 -1362.1    2  17.500 0.041443
model.lm      3 11 2761.1 -1369.5    3  14.857 0.000116

> out1<-anova(model.SDM, model.SAR, model.lm)  

> out2<-BIC(model.SDM, model.SAR, model.lm) 

> out3<-cbind(out1, out2) # combination of objects 

> out3 # displaying the result
          Model df      AIC    logLik   Test  L.Ratio      p-value df      BIC
model.SDM     1 21 2748.741 -1353.370              NA           NA 21 2831.484
model.SAR     2 12 2748.240 -1362.120 1 vs 2 17.49965 0.0414427685 12 2795.522
model.lm      3 11 2761.098 -1369.549 2 vs 3 14.85734 0.0001159559 11 2804.440

> #5.2.2.2 Test for heteroskedasticity of model residuals
> 
> library(lmtest)

> model.lm<-lm(eq1, data=sub)  

> bptest(model.lm)			# BP test for residuals from the OLS model

	studentized Breusch-Pagan test

data:  model.lm
BP = 21.902, df = 9, p-value = 0.009194


> # SAC model (two spatial coefficients rho and lambda) 
> model.SAC<-sacsarlm(eq1, data=sub, listw=cont.listw, method="LU")  

> bptest.Sarlm(model.SAC)		# BP test for residuals from the SAC model

	studentized Breusch-Pagan test

data:  
BP = 22.754, df = 9, p-value = 0.006774


> # LOSH statistics for the rest of the model
> losh.stat.SAC<-LOSH(model.SAC$residuals, cont.listw, a=2, var_hi=TRUE, zero.policy=TRUE, na.action=na. .... [TRUNCATED] 

> losh.stat.LM<-LOSH(model.lm$residuals, cont.listw, a=2, var_hi=TRUE, zero.policy=TRUE, na.action=na.exclude)

> library(GISTools)
Loading required package: maptools
Please note that 'maptools' will be retired during October 2023,
plan transition at your earliest convenience (see
https://r-spatial.org/r/2023/05/15/evolution4.html and earlier blogs
for guidance);some functionality will be moved to 'sp'.
 Checking rgeos availability: TRUE

Attaching package: 'maptools'

The following object is masked from 'package:sp':

    sp2Mondrian

Loading required package: RColorBrewer
Loading required package: MASS
Loading required package: rgeos
rgeos version: 0.6-4, (SVN revision 699)
 GEOS runtime version: 3.12.0-CAPI-1.18.0 
 Please note that rgeos will be retired during October 2023,
plan transition to sf or terra functions using GEOS at your earliest convenience.
See https://r-spatial.org/r/2023/05/15/evolution4.html for details.
 GEOS using OverlayNG
 Linking to sp version: 2.0-0 
 Polygon checking: TRUE 

Warning: replacing previous import 'maptools::sp2Mondrian' by 'sp::sp2Mondrian' when loading 'GISTools'

> choropleth(pov, losh.stat.SAC[,1], main="Spatial distribution of LOSH statistics for residuals from the SAC model")

> shades<-auto.shading(losh.stat.SAC[,1])

> choro.legend(14, 50.25, shades , cex=0.65, bty="n")

> choropleth(pov, losh.stat.LM[,1], main="Spatial distribution of LOSH statistics for residuals from the LM model ")

> shades<-auto.shading(losh.stat.LM[,1])

> choro.legend(14, 50.25, shades, cex=0.65, bty="n")

> #5.2.2.3 Residual autocorrelation tests
> 
> model.lm<-lm(eq1, data=sub)  

> lm.morantest(model.lm, cont.listw)	# Moran test for residuals from the OLS model

	Global Moran I for regression residuals

data:  
model: lm(formula = eq1, data = sub)
weights: cont.listw

Moran I statistic standard deviate = 3.2048, p-value = 0.0006758
alternative hypothesis: greater
sample estimates:
Observed Moran I      Expectation         Variance 
      0.09723969      -0.01034565       0.00112697 


> # SAC model (two spatial coefficients rho and lambda)  
> model.SAC<-sacsarlm(eq1, data=sub, listw=cont.listw, method="LU")  

> moran.test(model.SAC$residuals, cont.listw)# Moran test for residuals from SAC

	Moran I test under randomisation

data:  model.SAC$residuals  
weights: cont.listw    

Moran I statistic standard deviate = 0.11065, p-value = 0.4559
alternative hypothesis: greater
sample estimates:
Moran I statistic       Expectation          Variance 
      0.001031534      -0.002638522       0.001100089 


> # spatial distribution of residuals from the OLS linear model
> res<-model.lm$residuals

> brks<-c(min(res), mean(res)-sd(res), mean(res), mean(res)+sd(res), max(res))

> cols<-c("steelblue4","lightskyblue","thistle1","plum3")

> plot(pov, col=cols[findInterval(res,brks)])

> title(main=" Rest in the OLS model ")

> legend("bottomleft", legend=c("<mean-sd", "(mean-sd, mean)", "(mean, mean+sd)", ">mean+sd"), leglabs(brks1), fill=cols, bty="n", cex=0.8)

> # quick map of residuals divided into positive and negative
> pov$res<-res

> rng<-c(-100,0,100)

> cls<-brewer.pal(3, "PuBuGn")

> spplot(pov, "res", col.regions=cls, at=rng)

> title(main=" Positive and negative residuals in the OLS model ")

> # join.count test for residuals (positive vs. negative)
> resid<-factor(cut(res, breaks=c(-100, 0, 100),
+  	labels=c("Negative", "positive")))

> joincount.test(resid, cont.listw)

	Join count test under nonfree sampling

data:  resid 
weights: cont.listw 

Std. deviate for Negative = 1.2466, p-value = 0.1063
alternative hypothesis: greater
sample estimates:
Same colour statistic           Expectation              Variance 
             66.87745              64.14248               4.81364 


	Join count test under nonfree sampling

data:  resid 
weights: cont.listw 

Std. deviate for positive = 2.9562, p-value = 0.001557
alternative hypothesis: greater
sample estimates:
Same colour statistic           Expectation              Variance 
            38.820635             33.142480              3.689208 


> #5.2.2.4 LM tests for model type selection
> 
> lm.LMtests(model.lm, cont.listw, test="all")

	Lagrange multiplier diagnostics for spatial dependence

data:  
model: lm(formula = eq1, data = sub)
weights: cont.listw

LMerr = 8.0431, df = 1, p-value = 0.004568


	Lagrange multiplier diagnostics for spatial dependence

data:  
model: lm(formula = eq1, data = sub)
weights: cont.listw

LMlag = 14.342, df = 1, p-value = 0.0001524


	Lagrange multiplier diagnostics for spatial dependence

data:  
model: lm(formula = eq1, data = sub)
weights: cont.listw

RLMerr = 1.6084, df = 1, p-value = 0.2047


	Lagrange multiplier diagnostics for spatial dependence

data:  
model: lm(formula = eq1, data = sub)
weights: cont.listw

RLMlag = 7.9074, df = 1, p-value = 0.004923


	Lagrange multiplier diagnostics for spatial dependence

data:  
model: lm(formula = eq1, data = sub)
weights: cont.listw

SARMA = 15.95, df = 2, p-value = 0.0003439


> summary(lm.LMtests(model.lm, cont.listw, test="all"))
	Lagrange multiplier diagnostics for spatial dependence
data:  
model: lm(formula = eq1, data = sub)
weights: cont.listw
 
       statistic parameter   p.value    
LMerr     8.0431         1 0.0045678 ** 
LMlag    14.3421         1 0.0001524 ***
RLMerr    1.6084         1 0.2047233    
RLMlag    7.9074         1 0.0049233 ** 
SARMA    15.9505         2 0.0003439 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

> #5.2.2.5 LR and Wald tests for model restrictions
> 
> # unlimited model
> # Manski model (three spatial coefficients - lambda, rho, theta) 
> model .... [TRUNCATED] 

> # restricted model
> # SDM model (two spatial coefficients rho and theta) 
> model.SDM<-lagsarlm(eq1, data=sub, listw=cont.listw, type="mixed", tol. .... [TRUNCATED] 

> LR.Sarlm(model.GNS, model.SDM) # comparison of the two indicated models

	Likelihood ratio for spatial linear models

data:  
Likelihood ratio = 0.43276, df = 1, p-value = 0.5106
sample estimates:
Log likelihood of model.GNS Log likelihood of model.SDM 
                  -1353.154                   -1353.370 


> Wald1.Sarlm(model.SDM)	# comparison of the indicated model with OLS

	Wald diagnostics for spatial dependence

data:  
Wald statistic = 8.3815, df = 1, p-value = 0.003791
sample estimates:
      rho 
0.2044004 


> LR1.Sarlm(model.SDM) # comparison of the indicated model with OLS

	Likelihood Ratio diagnostics for spatial dependence

data:  
Likelihood ratio = 6.72, df = 1, p-value = 0.009534
sample estimates:
Log likelihood of spatial lag model         Log likelihood of OLS fit y 
                           -1353.37                            -1356.73 


> #5.2.3 Selection of spatial weight matrix and modelling of diffusion strength
> 
> crds<-coordinates(pov)

> pov.k.sym.listw<-nb2listw(make.sym.nb(knn2nb(knearneigh(crds, k=10))))  

> model.SAC.10<-sacsarlm(eq1, data=sub, listw=pov.k.sym.listw, method="LU")  

> pov.k.sym.listw<-nb2listw(make.sym.nb(knn2nb(knearneigh(crds, k=20))))  

> model.SAC.20<-sacsarlm(eq1, data=sub, listw=pov.k.sym.listw, method="LU")  

> pov.k.sym.listw<-nb2listw(make.sym.nb(knn2nb(knearneigh(crds, k=30))))  

> model.SAC.30<-sacsarlm(eq1, data=sub, listw=pov.k.sym.listw, method="LU")  

> pov.k.sym.listw<-nb2listw(make.sym.nb(knn2nb(knearneigh(crds, k=40))))  

> model.SAC.40<-sacsarlm(eq1, data=sub, listw=pov.k.sym.listw, method="LU")  
Warning in sqrt(diag(fdHess)[-c(1, 2)]) : NaNs produced

> pov.k.sym.listw<-nb2listw(make.sym.nb(knn2nb(knearneigh(crds, k=50))))  

> model.SAC.50<-sacsarlm(eq1, data=sub, listw=pov.k.sym.listw, method="LU")  

> pov.k.sym.listw<-nb2listw(make.sym.nb(knn2nb(knearneigh(crds, k=60))))  

> model.SAC.60<-sacsarlm(eq1, data=sub, listw=pov.k.sym.listw, method="LU")  

> pov.k.sym.listw<-nb2listw(make.sym.nb(knn2nb(knearneigh(crds, k=70))))  

> model.SAC.70<-sacsarlm(eq1, data=sub, listw=pov.k.sym.listw, method="LU")  
Warning in sqrt(diag(fdHess)[-c(1, 2)]) : NaNs produced

> pov.k.sym.listw<-nb2listw(make.sym.nb(knn2nb(knearneigh(crds, k=80))))  

> model.SAC.80<-sacsarlm(eq1, data=sub, listw=pov.k.sym.listw, method="LU")  

> pov.k.sym.listw<-nb2listw(make.sym.nb(knn2nb(knearneigh(crds, k=90))))  

> model.SAC.90<-sacsarlm(eq1, data=sub, listw=pov.k.sym.listw, method="LU")  

> pov.k.sym.listw<-nb2listw(make.sym.nb(knn2nb(knearneigh(crds, k=100))))  

> model.SAC.100<-sacsarlm(eq1, data=sub, listw=pov.k.sym.listw, method="LU")  

> out<-anova(model.SAC.10, model.SAC.20, model.SAC.30, model.SAC.40, model.SAC.50, model.SAC.60, model.SAC.70, model.SAC.80, model.SAC.90, model.SAC.1 .... [TRUNCATED] 

> out<-cbind(out, lambda=c(model.SAC.10$lambda, model.SAC.20$lambda, model.SAC.30$lambda, model.SAC.40$lambda, model.SAC.50$lambda, model.SAC.60$lambd .... [TRUNCATED] 

> out
              Model df      AIC    logLik    lambda         rho
model.SAC.10      1 13 2756.633 -1365.317 0.1819730  0.12783562
model.SAC.20      2 13 2755.119 -1364.559 0.3091112  0.15602115
model.SAC.30      3 13 2759.045 -1366.523 0.2834715  0.15805868
model.SAC.40      4 13 2760.381 -1367.190 0.1924196  0.24104726
model.SAC.50      5 13 2760.919 -1367.460 0.3169217  0.17301560
model.SAC.60      6 13 2762.646 -1368.323 0.3005130  0.11784719
model.SAC.70      7 13 2763.342 -1368.671 0.3339067  0.04653369
model.SAC.80      8 13 2764.143 -1369.072 0.3272617 -0.10778073
model.SAC.90      9 13 2764.070 -1369.035 0.3437953 -0.21799220
model.SAC.100    10 13 2762.173 -1368.087 0.3595672 -0.70966152

> # graph of spatial parameters in subsequent models – Fig.5.4a
> plot((1:10)*10, out[,5], type="l", ylim=c(-0.8,0.4), xlab = "knn number of neighbour ..." ... [TRUNCATED] 

> lines((1:10)*10, out[,6], lwd=2)

> legend("bottomleft", legend=c("lambda", "rho"), lty=c(1,1), lwd=c(1,2), bty="n")

> abline(h=(-8:4)/10, lty=3, col="grey80")

> # AIC information criteria chart in subsequent models - Fig.5.4b
> plot((1:10)*10, out[,3], type="l", ylim=c(2750,2770), xlab = "number of neighbour ..." ... [TRUNCATED] 

> legend("bottomleft", legend=c("AIC"), lty=1, lwd=2, bty="n")

> abline(h=c(2750,2755,2760, 2765, 2770), lty=3, col="grey80")

> #5.2.4 Forecasts in spatial models
> 
> # SDM model (two spatial coefficients, rho and theta) 
> model.SDM<-lagsarlm(eq1, data=sub, listw=cont.listw .... [TRUNCATED] 

> # SDEM model (two spatial coefficients, theta and lambda) 
> model.SDEM<-errorsarlm(eq1, data=sub, listw=cont.listw, etype="emixed", method="LU")  
Warning in RET$pfunction("adjusted", ...) :
  Completion with error > abseps

> # SAR model (one spatial factor rho) 
> model.SAR<-lagsarlm(eq1, data=sub, listw=cont.listw)  

> # SEM model (one lambda spatial coefficient) 
> model.SEM<-errorsarlm(eq1, data=sub, listw=cont.listw)  

> model.SDM.p<-predict(model.SDM)
This method assumes the response is known - see manual page

> model.SDEM.p<-predict(model.SDEM)
This method assumes the response is known - see manual page

> model.SAR.p<-predict(model.SAR)
This method assumes the response is known - see manual page

> model.SEM.p<-predict(model.SEM)
This method assumes the response is known - see manual page

> model.SEM.p
           fit     trend        signal
4181  77.04327  77.62578 -0.5825102564
4182  72.96587  73.90672 -0.9408520842
4183  81.61913  82.24747 -0.6283364090
4184  82.94573  84.14776 -1.2020306044
4185  84.91456  86.13334 -1.2187807732
4186  87.48227  87.34561  0.1366674590
4187  89.53950  90.09326 -0.5537605687
4188  78.35491  79.37776 -1.0228532469
4189  83.92675  84.17458 -0.2478318760
4190  82.34981  82.63111 -0.2813043907
4191 104.82015 106.57917 -1.7590203760
4192 106.00580 107.13633 -1.1305241672
4193  88.92144  88.37448  0.5469595880
4194  88.90658  88.01813  0.8884485893
4195  77.80512  78.08317 -0.2780460639
4196  93.02457  91.56322  1.4613567397
4197  73.72490  72.30847  1.4164332807
4198  83.35086  82.13660  1.2142603222
4199  93.61941  91.92648  1.6929265558
4200  96.35850  93.25835  3.1001505377
4201  75.76638  74.08040  1.6859855842
4202  81.94886  80.61576  1.3331065849
4203 101.99946  99.59931  2.4001518747
4204  77.74518  77.64048  0.1046958394
4205  76.42080  76.57074 -0.1499381422
4206  86.28206  85.15899  1.1230697542
4207  82.30562  82.23819  0.0674327052
4208  82.95286  81.46141  1.4914485349
4209  74.95157  73.16861  1.7829563168
4210  78.89909  78.95355 -0.0544591779
4211  75.64390  75.50213  0.1417629182
4212  83.62741  83.21174  0.4156658219
4213  86.98182  85.60135  1.3804693499
4214  72.95912  72.98585 -0.0267262691
4215 106.12961 102.44077  3.6888391697
4216  81.14109  80.96522  0.1758706133
4217  80.83581  77.91107  2.9247385129
4218  84.57765  84.40829  0.1693608820
4219  83.08372  81.96946  1.1142586451
4220  78.64389  78.21108  0.4328018084
4221  95.89962  93.54656  2.3530662872
4222  86.47757  85.51408  0.9634966752
4223  85.51047  84.23442  1.2760530353
4224  78.26110  76.19260  2.0685084352
4225  89.29085  87.08091  2.2099408852
4226  78.31255  78.39403 -0.0814863275
4227  87.24206  86.00819  1.2338783963
4228  84.14023  83.39955  0.7406831693
4229  73.62728  73.97954 -0.3522611361
4230  77.35522  77.54622 -0.1909985885
4231  80.02793  81.07806 -1.0501337547
4232  75.89967  74.59904  1.3006347433
4233  74.04689  74.74412 -0.6972263110
4234  83.26260  84.01709 -0.7544969934
4235  82.76473  82.68161  0.0831179192
4236  82.14258  82.49168 -0.3491003929
4237  83.61468  82.62396  0.9907224099
4238  81.58825  80.93868  0.6495699845
4239  87.54794  87.66886 -0.1209219598
4240  79.33998  79.78851 -0.4485356625
4241  81.84654  81.55121  0.2953272369
4242  83.00106  81.81762  1.1834378275
4243  90.13981  89.37871  0.7611064622
4244  79.59287  80.65126 -1.0583883303
4245  82.98359  81.44717  1.5364274146
4246  87.13965  85.84794  1.2917051236
4247  77.97502  78.31869 -0.3436718443
4248  81.34569  81.90586 -0.5601618582
4249  79.31930  77.48210  1.8371989848
4250  77.57845  77.56979  0.0086584769
4251 101.70070 100.91349  0.7872153236
4252  84.17208  83.99727  0.1748063918
4253  85.18142  86.67017 -1.4887468868
4254  77.78295  77.86557 -0.0826243003
4255  83.84502  82.96990  0.8751209653
4256  90.15681  88.03223  2.1245794777
4257  72.65658  73.22184 -0.5652596812
4258  77.48960  77.93200 -0.4424083637
4259  88.03584  88.12124 -0.0853984605
4260  78.45898  78.59902 -0.1400424229
4261  84.56762  83.59375  0.9738682334
4262  81.71777  81.35934  0.3584310105
4263  73.43943  74.47940 -1.0399637636
4264  78.65648  78.63360  0.0228767568
4265  91.00743  89.35644  1.6509958471
4266  87.92253  87.74396  0.1785722259
4267  80.85657  80.53942  0.3171532840
4268  82.19933  81.77962  0.4197189894
4269  73.40798  73.86885 -0.4608736062
4270  83.74274  84.62395 -0.8812095188
4271  85.79089  84.47531  1.3155874064
4272  94.30293  94.49467 -0.1917366645
4273  89.30334  87.66029  1.6430525295
4274 106.50525 104.49532  2.0099241447
4275  93.25195  93.12212  0.1298278164
4276  94.37851  95.30138 -0.9228677634
4277  89.87688  90.16899 -0.2921090581
4278  93.36491  94.91483 -1.5499164378
4279  88.24443  87.78094  0.4634840116
4280  84.78761  83.82724  0.9603690052
4281  85.12676  84.38407  0.7426939497
4282  84.15461  84.27828 -0.1236648508
4283  88.53277  90.39147 -1.8587076818
4284  80.60909  82.11765 -1.5085597535
4285  91.45311  90.94670  0.5064129724
4286  83.73313  83.00119  0.7319398998
4287  78.38467  79.60065 -1.2159800900
4288  84.39165  85.37237 -0.9807206372
4289  84.82249  84.26336  0.5591272812
4290  83.85581  83.67840  0.1774174736
4291  82.70770  83.79992 -1.0922155643
4292  79.82088  80.97134 -1.1504639867
4293  91.56983  92.59670 -1.0268699726
4294  82.83768  83.05133 -0.2136453333
4295  88.75961  89.10870 -0.3490927139
4296  81.92877  83.14817 -1.2193986314
4297  89.06655  90.22523 -1.1586729322
4298  82.25863  84.09721 -1.8385802573
4299  98.35284 100.25340 -1.9005584450
4300  87.88426  87.40552  0.4787371898
4301  81.70534  82.13618 -0.4308356773
4302 101.31951 101.53413 -0.2146170322
4303  94.13524  92.38969  1.7455466343
4304  82.80950  83.30046 -0.4909565187
4305  82.32980  82.86521 -0.5354092759
4306  84.52555  84.90752 -0.3819729457
4307  88.54518  89.65396 -1.1087810666
4308  85.10582  84.54161  0.5642151576
4309  80.80738  80.32305  0.4843287440
4310  82.33230  82.24692  0.0853724531
4311  94.01940  94.17351 -0.1541153716
4312  82.83017  82.45627  0.3739063675
4313  77.40529  78.65802 -1.2527356939
4314  77.26193  77.31042 -0.0484994373
4315  85.32249  85.84296 -0.5204714303
4316  82.45266  83.34000 -0.8873474525
4317  80.17779  80.81401 -0.6362109721
4318  82.79776  83.87385 -1.0760825993
4319  76.38300  78.85357 -2.4705783738
4320  79.28451  80.67924 -1.3947317284
4321  78.26706  79.02045 -0.7533909212
4322  83.81057  84.97934 -1.1687655228
4323  91.26091  91.13231  0.1285956535
4324  79.78504  78.74852  1.0365128618
4325  84.74203  85.03297 -0.2909446460
4326  88.68075  88.24068  0.4400659653
4327  78.21704  80.16135 -1.9443092645
4328  87.25984  86.35425  0.9055956108
4329  87.58330  86.27215  1.3111542194
4330  90.37318  87.48248  2.8906958516
4331 112.91497 111.65642  1.2585497353
4332  89.61492  90.80307 -1.1881501509
4333  87.23528  87.52071 -0.2854347491
4334  83.20819  83.41227 -0.2040789788
4335  82.40352  83.29196 -0.8884427173
4336  86.40147  87.96784 -1.5663755743
4337  85.78469  85.24312  0.5415669750
4338  85.50982  85.23468  0.2751346599
4339 105.61261 106.38419 -0.7715781313
4340  85.75875  84.15966  1.5990945514
4341  92.78171  91.92778  0.8539384223
4342  85.10239  85.79793 -0.6955365802
4343  88.60935  88.89702 -0.2876726410
4344  83.53635  84.90993 -1.3735870388
4345  84.83101  84.47998  0.3510307587
4346  85.06206  85.96994 -0.9078883909
4347  83.81451  83.79399  0.0205217072
4348  82.90914  82.21359  0.6955480847
4349  89.59071  89.36076  0.2299492860
4350  81.59084  83.65201 -2.0611661589
4351  96.96854  96.14070  0.8278423815
4352  76.03205  74.70425  1.3277976518
4353  84.35514  83.98891  0.3662237729
4354  83.84238  85.14431 -1.3019370339
4355  85.82776  85.16557  0.6621838561
4356  85.72633  85.66796  0.0583767371
4357  81.61692  82.80807 -1.1911451120
4358  86.04244  87.90724 -1.8647982742
4359  84.78533  86.02758 -1.2422572496
4360  93.85693  94.53274 -0.6758029972
4361  91.93082  91.52193  0.4088969238
4362  81.22145  81.86066 -0.6392089830
4363  83.23252  84.67683 -1.4443094778
4364  76.41079  75.33438  1.0764104088
4365  97.56276  96.28290  1.2798578203
4366  90.78254  91.08176 -0.2992212305
4367  77.55454  77.45238  0.1021679240
4368  83.15323  82.00328  1.1499557271
4369  86.49932  85.24441  1.2549087318
4370  79.40452  77.89510  1.5094148777
4371  78.60196  78.98299 -0.3810274091
4372  79.74686  80.24427 -0.4974119871
4373  85.90247  84.96678  0.9356898327
4374  82.49502  82.14944  0.3455747306
4375  73.90680  74.36035 -0.4535443283
4376  85.98277  87.49851 -1.5157352280
4377  84.11051  82.83126  1.2792596595
4378  97.24046  98.59818 -1.3577281878
4379  84.57263  83.61685  0.9557841618
4380  82.20139  83.14282 -0.9414288611
4381  87.55902  87.19900  0.3600285070
4382  90.01968  86.41224  3.6074372453
4383  81.56164  80.00514  1.5564929589
4384  75.16834  74.74794  0.4204065375
4385  97.34785  97.73131 -0.3834532435
4386  84.51910  86.34297 -1.8238683061
4387  89.15668  89.92155 -0.7648760624
4388  89.45836  90.55903 -1.1006741126
4389  84.41629  84.91833 -0.5020366917
4390  90.29551  90.82810 -0.5325859223
4391  80.49750  80.90022 -0.4027245870
4392 104.31457 106.54186 -2.2272895525
4393  86.04918  87.04199 -0.9928096796
4394  84.58158  85.39302 -0.8114439011
4395  75.74133  76.55179 -0.8104569257
4396  89.42732  88.57016  0.8571617452
4397  79.89905  79.04508  0.8539697539
4398  76.34080  73.23601  3.1047845303
4399  89.36991  89.05206  0.3178501660
4400  85.46330  85.10462  0.3586763903
4401  85.67095  85.52951  0.1414402373
4402  85.48808  85.67479 -0.1867136756
4403  87.23437  85.09769  2.1366809942
4404  84.68734  84.26353  0.4238138006
4405 102.81371 103.67264 -0.8589316962
4406  90.26050  90.26061 -0.0001072454
4407  83.88209  83.90489 -0.0227984184
4408  85.11347  85.71475 -0.6012836621
4409 110.28173 106.71475  3.5669823496
4410  82.90626  83.36592 -0.4596562237
4411  78.51895  78.90888 -0.3899275576
4412  78.73228  78.89883 -0.1665473499
4413  84.78907  84.88868 -0.0996111440
4414  89.78038  89.47203  0.3083507227
4415  83.71097  84.55508 -0.8441118018
4416  86.22179  86.62114 -0.3993493262
4417  84.92448  83.85251  1.0719686352
4418  83.99661  83.48186  0.5147443927
4419  83.75200  82.98644  0.7655568967
4420  82.82472  83.47558 -0.6508630741
4421  81.85205  82.30016 -0.4481094041
4422  81.21586  81.13859  0.0772780328
4423  78.07499  77.99129  0.0836983806
4424  78.95341  78.81093  0.1424771547
4425  84.00342  83.87351  0.1299087748
4426  85.26323  85.90463 -0.6414067716
4427  85.36314  84.89329  0.4698496123
4428 104.72190 104.93105 -0.2091508563
4429  74.21466  73.90469  0.3099695568
4430  78.43354  79.58165 -1.1481162525
4431  78.51504  78.48242  0.0326200666
4432  81.29961  79.73057  1.5690339117
4433  79.50183  79.78806 -0.2862249162
4434  86.03377  86.30906 -0.2752929497
4435  80.11487  80.56929 -0.4544211713
4436  82.49659  82.85688 -0.3602966416
4437  82.69141  82.50243  0.1889786284
4438  83.18994  83.72592 -0.5359818213
4439  80.12876  81.19224 -1.0634813052
4440  78.18502  78.25320 -0.0681838330
4441  83.69686  84.85007 -1.1532038759
4442  76.44180  75.55196  0.8898466551
4443  84.79463  85.90755 -1.1129233176
4444  82.06865  81.85166  0.2169885837
4445  89.94831  90.95049 -1.0021851396
4446  79.84973  79.69311  0.1566242589
4447  80.35667  80.78770 -0.4310270695
4448  94.04194  93.68136  0.3605802299
4449  86.72703  87.11633 -0.3893081066
4450  89.26151  86.26153  2.9999787343
4451  81.61902  81.30858  0.3104378196
4452  82.33568  81.65123  0.6844515059
4453  76.44655  75.38272  1.0638276120
4454  81.45654  81.43245  0.0240929386
4455  93.35556  92.53344  0.8221220579
4456  83.49477  83.77611 -0.2813425947
4457  97.76752  98.58140 -0.8138772585
4458  87.59912  87.61886 -0.0197392244
4459  92.30861  90.11910  2.1895060778
4460  86.39661  86.83604 -0.4394288409
4461  91.33772  90.02486  1.3128649843
4462  91.30303  88.44891  2.8541227571
4463  91.18645  91.13953  0.0469145007
4464  76.96419  76.52708  0.4371085954
4465  74.21053  74.69968 -0.4891536090
4466  83.73710  84.33123 -0.5941286200
4467 100.17307 100.50975 -0.3366793333
4468  80.01059  80.67078 -0.6601883232
4469  76.63943  77.11303 -0.4736056345
4470  81.21472  82.70760 -1.4928832292
4471  78.71603  78.23427  0.4817603128
4472  75.96337  75.87744  0.0859238411
4473  89.91870  89.53960  0.3790926352
4474  79.91577  79.66435  0.2514225271
4475  78.41564  78.89643 -0.4807823966
4476  84.93202  84.21858  0.7134435691
4477  80.66317  80.16875  0.4944215526
4478  88.38801  87.96576  0.4222495451
4479  94.44242  92.62312  1.8193045012
4480  99.90615  98.97756  0.9285827327
4481  78.34666  75.53325  2.8134133250
4482  79.76944  78.79228  0.9771579211
4483  87.40646  87.90737 -0.5009062396
4484 104.13902 102.72142  1.4175987973
4485  98.79930  97.37178  1.4275186081
4486  85.11087  85.11951 -0.0086429627
4487  95.84300  93.80693  2.0360648765
4488  81.96851  82.71364 -0.7451270440
4489  87.30511  86.64298  0.6621309359
4490  85.15530  85.94444 -0.7891316333
4491  92.84161  92.94851 -0.1068919549
4492  86.90555  87.34913 -0.4435821624
4493  90.57475  89.40764  1.1671066156
4494  86.94400  86.68881  0.2551900598
4495  81.46341  80.35806  1.1053447636
4496  91.90117  91.51518  0.3859867533
4497  93.58009  92.54657  1.0335186179
4498  90.58117  86.48720  4.0939673494
4499  85.78365  85.62757  0.1560807702
4500  82.78010  83.49956 -0.7194535747
4501  89.49156  90.43526 -0.9436998779
4502  92.61925  92.07987  0.5393760296
4503 103.63766 104.09714 -0.4594768519
4504  86.37372  86.26510  0.1086265493
4505  99.88240 100.05172 -0.1693164404
4506  93.76050  94.95694 -1.1964371816
4507 105.44345 105.53297 -0.0895293616
4508  89.27719  89.75692 -0.4797296320
4509 107.63139 108.45170 -0.8203071104
4510  91.15857  91.60583 -0.4472575450
4511  93.21951  91.44337  1.7761451547
4512  96.48690  96.55155 -0.0646470864
4513  85.48577  84.60345  0.8823241803
4514  96.38421  95.10410  1.2801128143
4515  79.76523  79.94752 -0.1822868194
4516  93.95219  93.81922  0.1329702324
4517  87.50243  87.11871  0.3837260003
4518  85.48476  86.82785 -1.3430910658
4519  86.19833  85.56554  0.6327893263
4520  85.24772  86.02359 -0.7758720173
4521  81.33849  82.02847 -0.6899831284
4522  79.77458  79.38623  0.3883488593
4523  86.49425  86.09863  0.3956274607
4524  91.25211  91.79390 -0.5417958443
4525  78.62044  79.48919 -0.8687518472
4526  84.64365  85.37574 -0.7320887522
4527  91.12822  87.22257  3.9056455663
4528  82.24893  82.98348 -0.7345493773
4529  98.47217  98.44671  0.0254651479
4530  82.74348  82.99348 -0.2499972656
4531  81.91924  82.25215 -0.3329116362
4532  86.91879  88.10458 -1.1857820381
4533  97.97043  97.85947  0.1109660094
4534 104.61049 100.91835  3.6921391195
4535  91.71744  91.27072  0.4467246955
4536  82.01336  83.35797 -1.3446104615
4537  84.18208  84.95770 -0.7756232229
4538  93.16994  93.02135  0.1485901775
4539  86.20410  82.86680  3.3372989068
4540  91.25557  90.12351  1.1320604663
4541  79.23411  78.73024  0.5038727070
4542  74.38131  74.52255 -0.1412339069
4543  81.55640  81.58821 -0.0318051829
4544  80.33173  81.23323 -0.9015019217
4545  77.47054  77.48147 -0.0109314280
4546  86.36666  86.51644 -0.1497849616
4547  79.98715  80.51161 -0.5244661513
4548  81.23270  81.94821 -0.7155090939
4549  98.81365  99.41418 -0.6005308091
4550  79.85088  80.70508 -0.8542018619
4551  86.45879  86.13530  0.3234915681
4552  94.55360  95.45426 -0.9006643535
4553  90.14679  90.58371 -0.4369158377
4554  76.93847  76.93614  0.0023239615
4555  81.78476  82.34471 -0.5599461269
4556  80.76445  80.45945  0.3049997586
4557  82.13102  82.49389 -0.3628607228
4558  81.49591  81.55626 -0.0603515419
4559  82.96472  83.22380 -0.2590776759
4560  87.34724  88.26724 -0.9200009724

> library(Metrics)

> vec<-c("model.SDM.p", "model.SDEM.p", "model.SAR.p", "model.SEM.p")

> metrics<-matrix(0, nrow=4, ncol=5)

> rownames(metrics)<-vec

> colnames(metrics)<-c("bias", "bias%", "MAE","MAPE", "RMSE")

> for(i in 1:4){
+ metrics[i,1]<-bias(sub$y, get(vec[i]))
+ metrics[i,2]<-percent_bias(sub$y, get(vec[i]))
+ metrics[i,3]<-mae(sub$y, get(vec[i]))
+ m .... [TRUNCATED] 

> metrics
                      bias        bias%      MAE       MAPE     RMSE
model.SDM.p   0.000000e+00 -0.007670291 5.513246 0.06198692 8.487296
model.SDEM.p -1.646019e-15 -0.007690391 5.537118 0.06226533 8.491335
model.SAR.p   8.598402e-16 -0.008023855 5.547210 0.06208778 8.661793
model.SEM.p  -2.544458e-15 -0.008221258 5.633744 0.06303802 8.729439

> #5.2.5 Causality
> #5.3 Selected specifications of cross-sectional spatial models
> #5.3.1 Uni-directional spatial interaction models
> 
> # drawing .... [TRUNCATED] 
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
OGR data source with driver: ESRI Shapefile 
Source: "/home/rsb/presentations/kk_spatial_book", layer: "wojewodztwa"
with 16 features
It has 29 fields

> voi<- spTransform(voi, CRS("OGC:CRS84"))
Warning: PROJ support is provided by the sf and terra packages among others

> par(mar=c(2,1,1,1)) 	# setting narrow margins

> bins<-c(0,1)

> variable<- data$core_city[data$year==2017]

> cols<-c("white", "red")

> plot(pov, col=cols[findInterval(variable, bins)])

> plot(voi, add=TRUE, lwd=2)

> # directional arrows
> crds<-coordinates(pov)

> city.id<-which(data$core_city==1 & data$year==2006)

> city.crds<-crds[city.id,]

> for(i in 1:4){
+ arrows(city.crds[,1], city.crds[,2], city.crds[,1]+rnorm(16,0,0.35), city.crds[,2]+rnorm(16,0,0.35), angle=15, length=0.10, lwd=1,  .... [TRUNCATED] 

> library(GISTools)

> library(RColorBrewer)

> # distance map of peripheral regions from central centres Fig.5.5a
> variable <-data$dist[data$year==2017]

> shading<-auto.shading(variable, n=6, cols=rev(brewer.pal(6, "Spectral")))

> choropleth(pov, variable, shading=shading)

> choro.legend(15, 50, shading, cex=0.65, bty="n")

> plot(voi, add=TRUE, lwd=2)

> par(mar=c(5,4,4,2))	# return to typical margin settings

> # panel chart Fig.5.6a
> data$variable<-data$XA21 # unemployment rate

> # subsets by distance
> sub1<-data[data$core_city==1,] 			# capital of the region 

> sub2<-data[data$dist>=2 & data$dist<25, ] 	# distance up to 25 km 

> sub3<-data[data$dist>=25 & data$dist<50, ] 	# dist. between 25 and 50 km

> sub4<-data[data$dist>=50 & data$dist<100, ]	# dist. between 50 and 100 km

> sub5<-data[data$dist>=100, ] 				# dist. over 100 km

> # average values by years in subsets by distance
> msub1<-aggregate(sub1$variable, by=list(sub1$year), mean)

> msub2<-aggregate(sub2$variable, by=list(sub2$year), mean)

> msub3<-aggregate(sub3$variable, by=list(sub3$year), mean)

> msub4<-aggregate(sub4$variable, by=list(sub4$year), mean)

> msub5<-aggregate(sub5$variable, by=list(sub5$year), mean)

> # combination of average values into one object
> sub<-cbind(msub1, msub2$x, msub3$x, msub4$x, msub5$x)

> minsub<-min(sub[,2:5], na.rm=TRUE)

> maxsub<-max(sub[,2:5], na.rm=TRUE)

> # panel chart
> plot(msub1, type="n", ylim=c(0,21), xlab="   ", ylab="   ")

> lines(msub1[1:12,], lwd=2)

> lines(msub2[1:12,], lwd=2, lty=2)

> lines(msub3[1:12,], lty=1)

> lines(msub4[1:12,], lty=2)

> lines(msub5[1:12,], lty=3)

> title(main="Unemployment rate in poviats")

> legend("bottom", legend=c("core - main regional cities","poviats located up to 25 km from the core","poviats located between 25 and 50 km from the c ..." ... [TRUNCATED] 

> # diagram of the phenomenon depending on the distance Fig.5.6b
> variable<-data$XA21[data$region_name=="Mazowieckie" & data$year==2017]

> dist<-data$dist[data$region_name=="Mazowieckie" & data$year==2017]

> population<-data$XA06[data$region_name=="Mazowieckie" & data$year==2017] / mean(data$XA06[data$region_name=="Mazowieckie" & data$year==2017])

> brks.pop<-c(0, 0.5,0.75, 1.00, 1.25, 2, 5, 20) #intervals for the population

> size<-brks.pop*1.6	# dot size scaling

> cols<-"chartreuse3"	# dot color

> plot(dist, variable, xlim=c(0,120),ylim=c(0,21), ylab="unemployment rate",
+ xlab="distance of the poviat from the voivodeship city", col=cols, bg=c .... [TRUNCATED] 

> title(main="Unemployment rate in poviats")

> abline(h=(0:8)*5, lty=3, col="grey80")

> abline(v=(0:10)*20, lty=3, col="grey80")

> sub<-data[data$year==2017,]

> sub$variable<-sub$XA21/mean(sub$XA21, na.rm=TRUE)

> # visualization of the distance - phenomenon relation
> plot(log(sub$dist),log(sub$variable), main="log x, log y")

> plot(log(sub$dist), sub$variable, main="x, log y")

> plot(sub$dist, sub$variable, main="x, y")

> # matrix of spatial weights according to the contiguity criterion 
> cont.nb<-poly2nb(as(pov, "SpatialPolygons")) 	# from the spdep:: package 

> cont.listw<-nb2listw(cont.nb, style="W")		# from the spdep:: package

> # model of polynomial distance (multinominal distance)
> mod.multi.asp<-glm(variable~dist+I(dist^2)+I(dist^3)+ I(dist^4), data=sub) 

> mod.multi.sp<-errorsarlm(variable~dist+I(dist^2)+ I(dist^3)+ I(dist^4), data=sub, cont.listw, tol.solve=2e-40)

> # power model
> mod.power.asp<-glm(log1p(variable)~log1p(dist), data=sub)

> mod.power.sp<-errorsarlm(log1p(variable)~log1p(dist), data=sub, cont.listw)

> # exponential model
> mod.exp.asp<-glm(log1p(variable)~dist, data=sub)

> mod.exp.sp<-errorsarlm(log1p(variable)~dist, data=sub, cont.listw)

> # goodness-of-fit measures
> out<-matrix(0, nrow=2, ncol=6)

> colnames(out)<-c("multi.asp", "multi.sp", "power.asp", "power.sp", "exp.asp", "exp.sp")

> rownames(out)<-c("SRMSE", "lambda")

> a<-mean(sub$variable)

> b<-dim(sub)[1]

> c<-sub$variable

> out[1,1]<-sqrt(sum((mod.multi.asp$fitted.values-c)^2)/b)/a

> out[1,2]<-sqrt(sum((mod.multi.sp$fitted.values-c)^2)/b)/a 

> out[1,3]<-sqrt(sum((mod.power.asp$fitted.values-c)^2)/b)/a

> out[1,4]<-sqrt(sum((mod.power.sp$fitted.values-c)^2)/b)/a 

> out[1,5]<-sqrt(sum((mod.exp.asp$fitted.values-c)^2)/b)/a 

> out[1,6]<-sqrt(sum((mod.exp.sp$fitted.values-c)^2)/b)/a

> out[2,2]<- mod.multi.sp$lambda

> out[2,4]<- mod.power.sp$lambda

> out[2,6]<- mod.exp.sp$lambda

> out
       multi.asp  multi.sp power.asp  power.sp   exp.asp    exp.sp
SRMSE  0.4708004 0.3842633 0.5860224 0.5437467 0.5889698 0.5501229
lambda 0.0000000 0.6310113 0.0000000 0.6426204 0.0000000 0.6299987

> # visualization of model fit – Fig.5.7
> plot(sub$dist, sub$variable, main="OLS, multinominal, fitted values")

> points(sub$dist, mod.multi.asp$fitted.values, col="red")

> abline(h=1, lty=3)

> plot(sub$dist, sub$variable, main="SEM, multinominal, fitted values")

> points(sub$dist, mod.multi.sp$fitted.values, col="red")

> abline(h=1, lty=3)

> plot(log1p(sub$dist), log1p(sub$variable), main="OLS, power, fitted values")

> points(log1p(sub$dist), mod.power.asp$fitted.values, col="red")

> abline(h=1, lty=3)

> plot(log1p(sub$dist), log1p(sub$variable), main="SEM, power, fitted values")

> points(log1p(sub$dist), mod.power.sp$fitted.values, col="red")

> abline(h=1, lty=3)

> plot(sub$dist, log1p(sub$variable), main="OLS, exponential, fitted values")

> points(sub$dist, mod.exp.asp$fitted.values, col="red")

> abline(h=1, lty=3)

> plot(sub$dist, log1p(sub$variable), main="SEM, exponential, fitted values")

> points(sub$dist, mod.exp.sp$fitted.values, col="red")

> abline(h=1, lty=3)

> # spatial polynomial models
> sub<-data[data$year==2017,]

> sub$variable<-sub$XA21/mean(sub$XA21, na.rm=TRUE)

> mod.multi.sp.2017<-errorsarlm(variable~poly(dist,4), data=sub, cont.listw, tol.solve=2e-40)

> sqrt(sum((mod.multi.sp.2017$fitted.values-sub$variable)^2)/dim(sub)[1])/ mean(sub$variable)
[1] 0.3842633

> #[1] 0.3842633
> 
> sub<-data[data$year==2006,]

> sub$variable<-sub$XA21/mean(sub$XA21, na.rm=TRUE)

> mod.multi.sp.2006<-errorsarlm(variable~poly(dist,4), data=sub, cont.listw, tol.solve=2e-40)

> sqrt(sum((mod.multi.sp.2006$fitted.values-sub$variable)^2)/dim(sub)[1])/ mean(sub$variable)
[1] 0.2653964

> #[1] 0.2653964
> 
> summary(mod.multi.sp.2006)

Call:
errorsarlm(formula = variable ~ poly(dist, 4), data = sub, listw = cont.listw, 
    tol.solve = 2e-40)

Residuals:
       Min         1Q     Median         3Q        Max 
-0.7816167 -0.1565798 -0.0087304  0.1689882  0.7595056 

Type: error 
Coefficients: (asymptotic standard errors) 
                Estimate Std. Error z value  Pr(>|z|)
(Intercept)     0.943175   0.047283 19.9473 < 2.2e-16
poly(dist, 4)1  1.240573   0.459602  2.6992  0.006950
poly(dist, 4)2 -1.647014   0.335285 -4.9123 9.002e-07
poly(dist, 4)3  0.853938   0.287480  2.9704  0.002974
poly(dist, 4)4 -0.502295   0.273232 -1.8383  0.066012

Lambda: 0.71185, LR test value: 174.34, p-value: < 2.22e-16
Asymptotic standard error: 0.043105
    z-value: 16.514, p-value: < 2.22e-16
Wald statistic: 272.72, p-value: < 2.22e-16

Log likelihood: -58.40521 for error model
ML residual variance (sigma squared): 0.070435, (sigma: 0.2654)
Number of observations: 380 
Number of parameters estimated: 7 
AIC: 130.81, (AIC for lm: 303.15)


> # matching visualization
> plot(sub$dist, mod.multi.sp.2017$fitted.values, col="red", pch=".", cex=1.5)

> lines(smooth.spline(sub$dist, mod.multi.sp.2017$fitted.values, spar=0.99), col="red")

> points(sub$dist, mod.multi.sp.2006$fitted.values, col="black", pch=".", cex=1.3)

> lines(smooth.spline(sub$dist, mod.multi.sp.2006$fitted.values, spar=0.99), col="black")

> abline(h=1, lty=3)

> legend("bottomright", legend=c("2006", "2017"), col=c("black", "red"), lty=c(1,1), bty="n")

> #5.3.2 Cumulative models
> 
> # creating simple quotients of two variables (or without changes)
> data$y<-data$XA01/data$XA06

> data$x1<-data$XA05/data$XA06

> data$x2<-data$XA14

> data$x3<-data$XA08/data$XA09

> data$x4<-data$XA13

> data$x5<-(data$XA18+data$XA19+data$XA20)/data$XA15

> data$x6<-data$dist

> data$x8<-data$XA21

> # subsets for each year
> sub10<-data[data$year==2010, ]

> sub11<-data[data$year==2011, ]

> sub12<-data[data$year==2012, ]

> sub13<-data[data$year==2013, ]

> sub14<-data[data$year==2014, ]

> sub15<-data[data$year==2015, ]

> sub16<-data[data$year==2016, ]

> sub17<-data[data$year==2017, ]

> # variables Poland=100%, referring to the average from a given year
> sub10$x7<-sub10$XA10/mean(sub10$XA10, na.rm=TRUE)

> sub11$x7<-sub11$XA10/mean(sub11$XA10, na.rm=TRUE)

> sub12$x7<-sub12$XA10/mean(sub12$XA10, na.rm=TRUE)

> sub13$x7<-sub13$XA10/mean(sub13$XA10, na.rm=TRUE)

> sub14$x7<-sub14$XA10/mean(sub14$XA10, na.rm=TRUE)

> sub15$x7<-sub15$XA10/mean(sub15$XA10, na.rm=TRUE)

> sub16$x7<-sub16$XA10/mean(sub16$XA10, na.rm=TRUE)

> sub17$x7<-sub17$XA10/mean(sub17$XA10, na.rm=TRUE)

> # cumulative dependent variable
> sub10$y.cum<-sub10$y

> sub11$y.cum<-sub10$y+sub11$y

> sub12$y.cum<-sub10$y+sub11$y+sub12$y

> sub13$y.cum<-sub10$y+sub11$y+sub12$y+sub13$y

> sub14$y.cum<-sub10$y+sub11$y+sub12$y+sub13$y+sub14$y

> sub15$y.cum<-sub10$y+sub11$y+sub12$y+sub13$y+sub14$y+sub15$y

> sub16$y.cum<-sub10$y+sub11$y+sub12$y+sub13$y+sub14$y+sub15$y+sub16$y

> sub17$y.cum<-sub10$y+sub11$y+sub12$y+sub13$y+sub14$y+sub15$y+sub16$y+ sub17$y

> # cumulative explanatory variable
> sub10$x1.cum<-sub10$x1

> sub11$x1.cum<-sub10$x1+sub11$x1

> sub12$x1.cum<-sub10$x1+sub11$x1+sub12$x1

> sub13$x1.cum<-sub10$x1+sub11$x1+sub12$x1+sub13$x1

> sub14$x1.cum<-sub10$x1+sub11$x1+sub12$x1+sub13$x1+sub14$x1

> sub15$x1.cum<-sub10$x1+sub11$x1+sub12$x1+sub13$x1+sub14$x1+sub15$x1

> sub16$x1.cum<-sub10$x1+sub11$x1+sub12$x1+sub13$x1+sub14$x1+sub15$x1 +sub16$x1

> sub17$x1.cum<-sub10$x1+sub11$x1+sub12$x1+sub13$x1+sub14$x1+sub15$x1 +sub16$x1+ sub17$x1

> # model equation
> eq<-y.cum~x1.cum+x2+x3+x4+x5+x6+x7+x8 # form of a regression equation

> # contiguity spatial weights matrix
> cont.nb<-poly2nb(as(pov, "SpatialPolygons")) 	

> cont.listw<-nb2listw(cont.nb, style="W")		

> # model estimation for subsequent years
> m10<-errorsarlm(eq, data=sub10, cont.listw, etype="emixed", tol.solve=1e-20)

> m11<-errorsarlm(eq, data=sub11, cont.listw, etype="emixed", tol.solve=1e-20)

> m12<-errorsarlm(eq, data=sub12, cont.listw, etype="emixed", tol.solve=1e-20)

> m13<-errorsarlm(eq, data=sub13, cont.listw, etype="emixed", tol.solve=1e-20)

> m14<-errorsarlm(eq, data=sub14, cont.listw, etype="emixed", tol.solve=1e-20)

> m15<-errorsarlm(eq, data=sub15, cont.listw, etype="emixed", tol.solve=1e-20)

> m16<-errorsarlm(eq, data=sub16, cont.listw, etype="emixed", tol.solve=1e-20)

> m17<-errorsarlm(eq, data=sub17, cont.listw, etype="emixed", tol.solve=1e-20)

> # combining model results into one printout
> options(scipen=999, digits=2)

> result<-cbind(m10$coefficients, m11$coefficients, m12$coefficients, m13$coefficients, m14$coefficients, m15$coefficients, m16$coefficients, m17$coef .... [TRUNCATED] 

> colnames(result)<-paste(rep("mod",times=8),2010:2017)

> lambda<-cbind(m10$lambda, m11$lambda, m12$lambda, m13$lambda, m14$lambda, m15$lambda, m16$lambda, m17$lambda)

> AIC<-cbind(AIC(m10), AIC(m11), AIC(m12), AIC(m13), AIC(m14), AIC(m15), AIC(m16), AIC(m17))

> result<-rbind(result,lambda, AIC)

> rownames(result)[19]<-"AIC"

> result
             mod 2010  mod 2011  mod 2012   mod 2013  mod 2014   mod 2015
(Intercept) -2194.100 -4058.154 -6151.450 -7408.9011 -8925.061 -11549.683
x1.cum          0.482     0.468     0.520     0.6066     0.625      0.602
x2             15.039    27.231    42.419    52.0092    64.047     86.867
x3             76.110   162.769   269.351   263.8917   286.254    335.079
x4              0.395     1.012     1.349     1.7142     2.123      2.603
x5            530.276   658.899  1198.526  2224.5390  3149.084   3477.850
x6              1.019     1.175     2.190     1.8414     1.846      3.194
x7             66.757   155.381   240.926   299.9315   381.852    473.157
x8            -12.677   -21.297   -29.730   -38.1687   -47.485    -52.631
lag.x1.cum     -0.026     0.011     0.016    -0.0061     0.015      0.059
lag.x2          8.532    18.428    30.870    41.7750    51.480     68.705
lag.x3          3.685    -9.211   -71.266  -211.4286  -321.146   -503.737
lag.x4         -0.126    -0.676    -1.018    -1.5882    -2.052     -2.518
lag.x5       1100.336  3429.408  5207.142  8454.0844 10861.526  12672.098
lag.x6         -0.413     0.494     0.911     5.4253     8.472     11.065
lag.x7        -13.232  -107.943  -207.638  -356.0689  -474.167   -641.011
lag.x8          0.232   -11.166   -19.100   -34.5966   -57.298    -65.118
lambda          0.277     0.258     0.281     0.2448     0.251      0.252
AIC          5372.642  5886.789  6197.956  6395.4097  6570.994   6700.178
             mod 2016  mod 2017
(Intercept) -13676.84 -15494.58
x1.cum           0.68      0.76
x2             105.82    122.86
x3             219.94      6.22
x4               2.84      3.34
x5            4900.45   6009.79
x6               5.11      7.49
x7             505.47    545.72
x8             -64.81    -67.64
lag.x1.cum       0.10      0.11
lag.x2          81.41     89.10
lag.x3        -610.56   -639.14
lag.x4          -2.80     -3.42
lag.x5       13665.05  15923.38
lag.x6          12.33     12.69
lag.x7        -680.72   -708.00
lag.x8         -68.85    -89.60
lambda           0.28      0.31
AIC           6815.28   6919.73

> # ratio of direct and indirect effects
> abs(result[2:9,])/abs(result[10:17,])
       mod 2010 mod 2011 mod 2012 mod 2013 mod 2014 mod 2015 mod 2016 mod 2017
x1.cum    18.71    41.58    32.87    99.39    41.55    10.27     6.82   7.1655
x2         1.76     1.48     1.37     1.24     1.24     1.26     1.30   1.3789
x3        20.66    17.67     3.78     1.25     0.89     0.67     0.36   0.0097
x4         3.13     1.50     1.32     1.08     1.03     1.03     1.01   0.9779
x5         0.48     0.19     0.23     0.26     0.29     0.27     0.36   0.3774
x6         2.47     2.38     2.40     0.34     0.22     0.29     0.41   0.5902
x7         5.05     1.44     1.16     0.84     0.81     0.74     0.74   0.7708
x8        54.75     1.91     1.56     1.10     0.83     0.81     0.94   0.7549

> #5.3.3 Bootstrapped models for big data
> 
> # loading data on firms
> firms<-read.csv("geoloc_data_firms.csv", header=TRUE, dec=",", sep=";")

> voi<-readOGR(".", "wojewodztwa", stringsAsFactors=TRUE, integer64="allow.loss") # 16 units 
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
OGR data source with driver: ESRI Shapefile 
Source: "/home/rsb/presentations/kk_spatial_book", layer: "wojewodztwa"
with 16 features
It has 29 fields

> voi<- spTransform(voi, CRS("OGC:CRS84"))
Warning: PROJ support is provided by the sf and terra packages among others

> # set of additional parameters for non-aggregated sectors
> param<-data.frame(SEC_PKD7=c("A", "B", "C", "D" ,"E", "F", "G", "H", "I", "J", "K" ,"L", .... [TRUNCATED] 

> firms1<-merge(firms, param, by="SEC_PKD7") # merging parameters and data

> # set of additional parameters for aggregated sectors
> param2<-data.frame(SEK_agg=c("agri", "prod", "constr", "serv"), roa_sec=c(2,3.5,5,8))

> firms1<-merge(firms1, param2, by="SEK_agg") # merging parameters and data

> # premium for central location
> firms1$roa_geo<-ifelse(firms1$poviat=="powiat Lublin", 1.5,0)

> firms1$roa_param<-firms1$roa_sec+firms1$roa_geo # final ROA with premium

> # drawing ROA profitability based on the assumed parameter
> for(i in 1:dim(firms1)){
+ firms1$roa[i]<-rnorm(1, firms1$roa_param[i], 0.045)}
Warning in 1:dim(firms1) :
  numerical expression has 2 elements: only the first used

> # dummy variables for sectors
> firms1$agri<-ifelse(firms1$SEK_agg=="agri",1,0)

> firms1$prod<-ifelse(firms1$SEK_agg=="prod",1,0)

> firms1$constr<-ifelse(firms1$SEK_agg=="constr",1,0)

> firms1$serv<-ifelse(firms1$SEK_agg=="serv",1,0)

> library(spdep)

> # Euclidean distance between a point and the centre of Lublin
> coords<-as.matrix(data.frame(x=firms1$coords.x1, y=firms1$coords.x2))

> core<-c(22.5666700, 51.2500000) # coordinates of central Lublin

> firms1$dist<-spDistsN1(coords, core, longlat=TRUE)

> # randomly scattered locations (by epsilon) of observations
> epsilon.x<-rnorm(dim(firms1)[1], mean=0, sd=0.015)

> epsilon.y<-rnorm(dim(firms1)[1], mean=0, sd=0.015)

> firms1$xxe<-firms1[,24]+epsilon.x

> firms1$yye<-firms1[,25]+epsilon.y

> # random ordering of the firms set
> library(doBy)

> firms1$los<-runif(dim(firms1)[1], 0,1)

> firms1<-orderBy(~los, data=firms1)

> # division of firms into training (in) and test (out)
> firms1.in<-firms1[1:30000,]

> firms1.out<-firms1[30001:37374,]

> # simulation parameters (to be changed by the researcher)
> # parameters of simulation – change here the parameters
> n.col<-50 # number of iteratio .... [TRUNCATED] 

> n.row<-800 # number of obs in a sample

> # division of observations into k groups by k-means method
> firms1.in.crds<-firms1.in[,14:15] # geographical coordinates

> groups<-kmeans(firms1.in.crds, n.row/100) # based on geographic coordinates.

> firms1.in$kmean<-groups$cluster # clustering vector

> library(sampling)

> # ID matrix of observations drawn for each iteration
> # randomly selected with the loss() command from the sampling package:
> # randomized observa .... [TRUNCATED] 

> for(i in 1:n.col){
+ vec<-sample(1:dim(firms1.in)[1], n.row, replace=FALSE)
+ x<-strata(firms1.in, "kmean", size=rep(100, times=n.row/100), method=" ..." ... [TRUNCATED] 

> # objects for saving estimation results
> coef.sdm<-matrix(0, nrow=n.col, ncol=11) # matrix of model coefficients

> error.sdm<-matrix(0, nrow=n.col, ncol=11) # matrix of standard errors

> fitted.sdm<-matrix(0, nrow=n.row, ncol=n.col) # matched values

> roa<-matrix(0, nrow=n.row, ncol=n.col) # matrix of y values

> other.sdm<-matrix(0, nrow=n.row, ncol=4) # AIC.sdm, BIC.sdm, czas.sdm, rho.sdm

> eq<-roa~empl+prod+constr+serv+dist # model structure

> library(spdep) # necessary for spatial regression

> library(spatialreg) # necessary for spatial regression

> # estimation in the loop of models with saving the results to objects
> for(i in 1:n.col){  # n.col defines the number of iterations
+ datax<-firms1 .... [TRUNCATED] 
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: identical points found
Warning in knearneigh(crds, k = 5, longlat = NULL) :
  knearneigh: kd_tree not available for identical points

> print(head(coef.sdm), digits=3)
      [,1]       [,2] [,3] [,4] [,5]     [,6]      [,7]  [,8]  [,9] [,10]
[1,] 0.182 -0.0002453 1.54 3.01 6.02 -0.00216  0.000726 -1.28 -2.70 -5.44
[2,] 0.333  0.0000239 1.49 3.06 6.01 -0.00812  0.000858 -1.24 -2.50 -4.95
[3,] 0.234  0.0000239 1.49 2.98 5.99 -0.00423 -0.000134 -1.33 -2.53 -5.31
[4,] 0.247 -0.0003079 1.52 3.00 6.03 -0.00505 -0.000276 -1.33 -2.71 -5.29
[5,] 0.198 -0.0002466 1.49 3.00 6.02 -0.00462 -0.001869 -1.39 -2.80 -5.42
[6,] 0.213  0.0000109 1.49 3.00 6.01 -0.00481 -0.000566 -1.43 -2.63 -5.32
       [,11]
[1,] 0.00170
[2,] 0.00760
[3,] 0.00386
[4,] 0.00464
[5,] 0.00428
[6,] 0.00447

> print(head(other.sdm), digits=3)
      [,1]  [,2] [,3]  [,4]
[1,]  -998  -937 2.31 0.913
[2,]  -576  -515 2.29 0.838
[3,]  -868  -807 2.31 0.892
[4,]  -903  -842 2.32 0.887
[5,] -1213 -1152 2.30 0.913
[6,] -1033  -973 2.28 0.898

> library(cluster)

> library(clustertend)
Package `clustertend` is deprecated.  Use package `hopkins` instead.

> c1.sdm<-pam(cbind(coef.sdm, other.sdm[1:50,4]),1) # z pakietu cluster::

> summary(c1.sdm)
Medoids:
     ID                                                                
[1,] 32 0.23 -0.0002 1.5 3 6 -0.002 -0.00035 -1.3 -2.7 -5.3 0.0016 0.89
Clustering vector:
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[39] 1 1 1 1 1 1 1 1 1 1 1 1
Objective function:
build  swap 
 0.18  0.18 

Numerical information per cluster:
     size max_diss av_diss diameter separation
[1,]   50     0.57    0.18     0.86          0

Isolated clusters:
 L-clusters: character(0)
 L*-clusters: character(0)

1225 dissimilarities, summarized :
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.03    0.14    0.21    0.26    0.34    0.86 
Metric :  euclidean 
Number of objects : 50

Available components:
 [1] "medoids"    "id.med"     "clustering" "objective"  "isolation" 
 [6] "clusinfo"   "silinfo"    "diss"       "call"       "data"      

> c1.sdm$clustering # clustering vector
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[39] 1 1 1 1 1 1 1 1 1 1 1 1

> c1.sdm$medoids # medoid model coefficients
     [,1]    [,2] [,3] [,4] [,5]   [,6]     [,7] [,8] [,9] [,10]  [,11] [,12]
[1,] 0.23 -0.0002  1.5    3    6 -0.002 -0.00035 -1.3 -2.7  -5.3 0.0016  0.89

> c1.sdm$id.med # medoid model number
[1] 32

> hopkins(cbind(coef.sdm, other.sdm[1:50,4]), n=nrow(coef.sdm)-1) # 
Warning: Package `clustertend` is deprecated.  Use package `hopkins` instead.
$H
[1] 0.3


> # re-estimation of the best model
> # selection of data on which the medoid model was scored
> data.x<-firms1.in[selector[,c1.sdm$id.med],] 

> # comparison of empirical and matched y values 
> RAMSE.med.sdm<-(sum((firms1.in[selector[,c1.sdm$id.med],33]-fitted.sdm[,c1.sdm$id.med])^2)/n.row)^ .... [TRUNCATED] 

> RAMSE.med.sdm
[1] 0.11

> #[1] 0.1217029
> 
> crds<-as.matrix(data.x[,14:15]) # xy coordinates to the W matrix

> pkt.knn<-knearneigh(crds, k=5) # knn object
Warning in knearneigh(crds, k = 5) : knearneigh: identical points found
Warning in knearneigh(crds, k = 5) :
  knearneigh: kd_tree not available for identical points

> pkt.k.nb<-knn2nb(pkt.knn) 

> pkt.k.sym.nb<-make.sym.nb(pkt.k.nb)

> pkt.k.sym.listw<-nb2listw(pkt.k.sym.nb)

> eq<-roa~empl+prod+constr+serv+dist

> model.sdm<-lagsarlm(eq, data=data.x, pkt.k.sym.listw, method="LU", type="mixed")

> summary(model.sdm)

Call:lagsarlm(formula = eq, data = data.x, listw = pkt.k.sym.listw, 
    type = "mixed", method = "LU")

Residuals:
       Min         1Q     Median         3Q        Max 
-1.0795565 -0.0365788  0.0014033  0.0376234  0.9903765 

Type: mixed 
Coefficients: (asymptotic standard errors) 
               Estimate  Std. Error  z value              Pr(>|z|)
(Intercept)  0.22920557  0.03214514   7.1303     0.000000000001001
empl        -0.00020187  0.00044344  -0.4552                0.6489
prod         1.51058501  0.02302875  65.5956 < 0.00000000000000022
constr       3.00715540  0.01806895 166.4267 < 0.00000000000000022
serv         6.04348695  0.00954013 633.4807 < 0.00000000000000022
dist        -0.00202030  0.00191652  -1.0541                0.2918
lag.empl    -0.00035005  0.00106740  -0.3279                0.7430
lag.prod    -1.33138892  0.06257353 -21.2772 < 0.00000000000000022
lag.constr  -2.70942783  0.06056221 -44.7379 < 0.00000000000000022
lag.serv    -5.34650311  0.08258874 -64.7365 < 0.00000000000000022
lag.dist     0.00156147  0.00193402   0.8074                0.4195

Rho: 0.89, LR test value: 1235, p-value: < 0.000000000000000222
Asymptotic standard error: 0.013
    z-value: 70, p-value: < 0.000000000000000222
Wald statistic: 4911, p-value: < 0.000000000000000222

Log likelihood: 506 for mixed model
ML residual variance (sigma squared): 0.013, (sigma: 0.11)
Number of observations: 800 
Number of parameters estimated: 13 
AIC: NA (not available for weighted model), (AIC for lm: 247)
LM test for residual autocorrelation
test value: 15, p-value: 0.00011958


> moran.test(model.sdm$residuals, pkt.k.sym.listw)

	Moran I test under randomisation

data:  model.sdm$residuals  
weights: pkt.k.sym.listw    

Moran I statistic standard deviate = -2, p-value = 1
alternative hypothesis: greater
sample estimates:
Moran I statistic       Expectation          Variance 
         -0.04359          -0.00125           0.00037 


> library(rgdal)

> library(spatstat)
Loading required package: spatstat.data
Loading required package: spatstat.geom
spatstat.geom 3.2-7

Attaching package: 'spatstat.geom'

The following object is masked from 'package:cluster':

    volume

The following object is masked from 'package:MASS':

    area

Loading required package: spatstat.random
spatstat.random 3.2-1
Loading required package: spatstat.explore
Loading required package: nlme
spatstat.explore 3.2-5

Attaching package: 'spatstat.explore'

The following object is masked from 'package:Metrics':

    auc

Loading required package: spatstat.model
Loading required package: rpart
spatstat.model 3.2-8
Loading required package: spatstat.linnet
spatstat.linnet 3.1-1

spatstat 3.0-6 
For an introduction to spatstat, type 'beginner' 


> library(maptools)

> voi<-readOGR(".", "wojewodztwa", stringsAsFactors=TRUE, integer64="allow.loss") # 16 units
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
OGR data source with driver: ESRI Shapefile 
Source: "/home/rsb/presentations/kk_spatial_book", layer: "wojewodztwa"
with 16 features
It has 29 fields

> voi<-spTransform(voi, CRS("OGC:CRS84")) # spherical
Warning: PROJ support is provided by the sf and terra packages among others

> voi<-spTransform(voi, CRS("+proj=merc +datum=NAD83")) # planar

> region<-voi[voi$jpt_nazwa_=="lubelskie",] # one region only

> region.owin<-as.owin(region) # rgdal:: requires planar coordinates

> points<-data.frame(x=firms1.in[selector[,c1.sdm$id.med],14],
+ y=firms1.in[selector[,c1.sdm$id.med],15])

> points.sp<-SpatialPoints(points) # new points in sp class - spherical

> proj4string(points.sp)<-CRS("OGC:CRS84") # spherical

> points.sp<-spTransform(points.sp, CRS("+proj=merc +datum=NAD83")) # planar

> region.ppp<-ppp(x=points.sp@coords[,1], y=points.sp@coords[,2], window=region.owin) # points of ppp class
Warning: data contain duplicated points

> region.tes<-dirichlet(region.ppp) # Dirichlet tesselation
Warning: 41 duplicated points were removed

> tes.poly<-as(region.tes, "SpatialPolygons") 

> proj4string(tes.poly)<-CRS("+proj=merc +datum=NAD83")

> tes.poly<-spTransform(tes.poly, CRS("+proj=merc +datum=NAD83")) #planar
Warning: PROJ support is provided by the sf and terra packages among others

> plot(region) # Fig.5.9a

> points(points.sp, pch=".")

> plot(region.tes, main=" ") # tessellation plot, Fig.5.9b

> plot(region.ppp, add=TRUE, pch=".", col="darkblue", cex=2)

> nnew<-100 # number of new points in the forecast

> forecasts1<-matrix(0, nrow=nnew, ncol=5)

> colnames(forecasts1)<-c("predicted y","real y","crds x","crds y", "diff")

> points.pred<-SpatialPoints(firms1.out[1:nnew, 14:15]) # new sp points

> proj4string(points.pred)<-CRS("OGC:CRS84") # spherical

> points.pred<-spTransform(points.pred, CRS("+proj=merc +datum=NAD83"))

> a1<-over(points.pred, tes.poly) # assigning points to tessellation tiles

> head(a1)
37283 34548  5384  7606 20851 24359 
  249    39   124   202   590   521 

> # completing the draw when NA occurs
> # determining the number of new points to be drawn (as from-to)
> a2<-nnew+1 # from …

> a3<-which(is.na(a1))

> a4<-a2+length(a3)-1  # to …

> points.pred2<-SpatialPoints(firms1.out[a2:a4, 14:15]) # new points

> proj4string(points.pred2)<-CRS("OGC:CRS84") # spherical

> points.pred2<-spTransform(points.pred2, CRS("+proj=merc +datum=NAD83"))

> points.pred2
SpatialPoints:
      coords.x1 coords.x2
1871    2497692   6701367
16468   2536466   6763322
Coordinate Reference System (CRS) arguments: +proj=merc +lon_0=0 +k=1
+x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs 

> a5<-over(points.pred2, tes.poly) # putting new points on the tile

> a5
 1871 16468 
  466   298 

> a1[which(is.na(a1))]<-a5 # overwriting with new points

> # loop for forecasts for new points
> # there is a separate match for each point
> for(i in 1:nnew){
+ # point by point - assigning new data to the  .... [TRUNCATED] 
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata
Warning in predict.Sarlm(model.sdm, newdata = data.x.new, listw = pkt.k.sym.listw,  :
  some region.id are both in data and newdata

> forecasts1[,5]<-(forecasts1[,1]-forecasts1[,2])^2

> RAMSE.sdm<-(mean(forecasts1[,5]))^0.5

> head(forecasts1)
     predicted y real y crds x crds y   diff
[1,]         8.1    8.0     23     50 0.0132
[2,]         8.4    8.0     23     51 0.1411
[3,]         2.1    2.0     23     52 0.0064
[4,]         1.8    2.0     23     50 0.0247
[5,]         1.9    2.0     22     51 0.0119
[6,]         3.3    3.5     24     51 0.0275

> RAMSE.sdm
[1] 0.33

> #5.3.4 Models for grid data
> 
> #a reminder of the loaded grid data for the population
> #loading grid for population and converting projections
>  .... [TRUNCATED] 
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
OGR data source with driver: ESRI Shapefile 
Source: "/home/rsb/presentations/kk_spatial_book", layer: "PD_STAT_GRID_CELL_2011"
with 315857 features
It has 16 fields
Integer64 fields read as signed 32-bit integers:  TOT TOT_0_14 TOT_15_64 TOT_65__ TOT_MALE TOT_FEM MALE_0_14 MALE_15_64 MALE_65__ FEM_0_14 FEM_15_64 FEM_65__ 

> pop<-spTransform(pop, CRS("OGC:CRS84"))
Warning: PROJ support is provided by the sf and terra packages among others

> pop.df<-as.data.frame(pop) # extracting data to data.frame 

> pop.grid<-as(pop, "SpatialPolygons") # extracting grid 

> #conversion to numerical data of subsequent columns of the data set
> for(i in 1:12){  
+ pop.df[,i]<-as.numeric(as.character(pop.df[,i]))}

> ##cutting the grid according to the contour of the lubelskie region
> #cutting the contour map
> voi<-spTransform(voi, CRS("OGC:CRS84")) # spherical
Warning: PROJ support is provided by the sf and terra packages among others

> voi.lub<-voi[voi$jpt_nazwa_=="lubelskie",]

> plot(voi.lub)

> lim<-over(pop.grid, voi.lub) # overlay of grid and contour

> summary(lim)
        iip_przest                                    iip_identy    
 PL.PZGIK.200: 25753   a1e8cdc7-d26d-4982-946f-ff3e5082eecd: 25753  
 NA's        :290104   42d2335f-bd81-491e-b93c-effe1bcab872:     0  
                       45e7cfc6-6d8b-42ff-acbd-ef1d0a53dacb:     0  
                       4b6c492a-eb04-441d-a92a-f44359c06de7:     0  
                       53ad7aea-d9d3-40c9-9a5c-ff737d5b076e:     0  
                       (Other)                             :     0  
                       NA's                                :290104  
                     iip_wersja     jpt_sjr_ko      jpt_kod_je    
 2012-09-27T13:45:12+02:00: 25753   WOJ : 25753   06     : 25753  
 2012-09-27T13:45:13+02:00:     0   NA's:290104   02     :     0  
 2013-07-09T11:04:17+02:00:     0                 04     :     0  
 NA's                     :290104                 08     :     0  
                                                  10     :     0  
                                                  (Other):     0  
                                                  NA's   :290104  
              jpt_nazwa_     jpt_nazw01    jpt_organ_    jpt_orga01   
 lubelskie         : 25753   NA's:315857   NA's:315857   NZN : 25753  
 dolno\x9cl\xb9skie:     0                               NA's:290104  
 kujawsko-pomorskie:     0                                            
 lubuskie          :     0                                            
 mazowieckie       :     0                                            
 (Other)           :     0                                            
 NA's              :290104                                            
   jpt_jor_id           wazny_od      wazny_do      jpt_wazna_   
 Min.   : NA      2012/09/26: 25753   NA's:315857   NZN : 25753  
 1st Qu.: NA      NA's      :290104                 NA's:290104  
 Median : NA                                                     
 Mean   :NaN                                                     
 3rd Qu.: NA                                                     
 Max.   : NA                                                     
 NA's   :315857                                                  
      wersja_od      wersja_do       jpt_powier      jpt_kj_iip   
 2012/09/26: 25753   NA's:315857   Min.   :2512291   EGIB: 25753  
 2013/07/09:     0                 1st Qu.:2512291   NA's:290104  
 NA's      :290104                 Median :2512291                
                                   Mean   :2512291                
                                   3rd Qu.:2512291                
                                   Max.   :2512291                
                                   NA's   :290104                 
   jpt_kj_i01     jpt_kj_i02    jpt_kod_01      id_bufora_       id_bufor01    
 06     : 25753   NA's:315857   NA's:315857   Min.   :13890    Min.   : NA     
 02     :     0                               1st Qu.:13890    1st Qu.: NA     
 04     :     0                               Median :13890    Median : NA     
 08     :     0                               Mean   :13890    Mean   :NaN     
 10     :     0                               3rd Qu.:13890    3rd Qu.: NA     
 (Other):     0                               Max.   :13890    Max.   : NA     
 NA's   :290104                               NA's   :290104   NA's   :315857  
   id_technic     jpt_opis      jpt_sps_ko    gra_ids          status_obi    
 Min.   :829365   NA's:315857   UZG : 25753   NA's:315857   AKTUALNY: 25753  
 1st Qu.:829365                 NA's:290104                 NA's    :290104  
 Median :829365                                                              
 Mean   :829365                                                              
 3rd Qu.:829365                                                              
 Max.   :829365                                                              
 NA's   :290104                                                              
 opis_bledu    typ_bledu    
 NA's:315857   NA's:315857  
                            
                            
                            
                            
                            
                            

> a<-which(lim$jpt_nazwa_=="lubelskie") # rows which fulfill the criteria

> head(lim[a,])
         iip_przest                           iip_identy
241240 PL.PZGIK.200 a1e8cdc7-d26d-4982-946f-ff3e5082eecd
241322 PL.PZGIK.200 a1e8cdc7-d26d-4982-946f-ff3e5082eecd
241859 PL.PZGIK.200 a1e8cdc7-d26d-4982-946f-ff3e5082eecd
241965 PL.PZGIK.200 a1e8cdc7-d26d-4982-946f-ff3e5082eecd
241985 PL.PZGIK.200 a1e8cdc7-d26d-4982-946f-ff3e5082eecd
241991 PL.PZGIK.200 a1e8cdc7-d26d-4982-946f-ff3e5082eecd
                      iip_wersja jpt_sjr_ko jpt_kod_je jpt_nazwa_ jpt_nazw01
241240 2012-09-27T13:45:12+02:00        WOJ         06  lubelskie       <NA>
241322 2012-09-27T13:45:12+02:00        WOJ         06  lubelskie       <NA>
241859 2012-09-27T13:45:12+02:00        WOJ         06  lubelskie       <NA>
241965 2012-09-27T13:45:12+02:00        WOJ         06  lubelskie       <NA>
241985 2012-09-27T13:45:12+02:00        WOJ         06  lubelskie       <NA>
241991 2012-09-27T13:45:12+02:00        WOJ         06  lubelskie       <NA>
       jpt_organ_ jpt_orga01 jpt_jor_id   wazny_od wazny_do jpt_wazna_
241240       <NA>        NZN         NA 2012/09/26     <NA>        NZN
241322       <NA>        NZN         NA 2012/09/26     <NA>        NZN
241859       <NA>        NZN         NA 2012/09/26     <NA>        NZN
241965       <NA>        NZN         NA 2012/09/26     <NA>        NZN
241985       <NA>        NZN         NA 2012/09/26     <NA>        NZN
241991       <NA>        NZN         NA 2012/09/26     <NA>        NZN
        wersja_od wersja_do jpt_powier jpt_kj_iip jpt_kj_i01 jpt_kj_i02
241240 2012/09/26      <NA>    2512291       EGIB         06       <NA>
241322 2012/09/26      <NA>    2512291       EGIB         06       <NA>
241859 2012/09/26      <NA>    2512291       EGIB         06       <NA>
241965 2012/09/26      <NA>    2512291       EGIB         06       <NA>
241985 2012/09/26      <NA>    2512291       EGIB         06       <NA>
241991 2012/09/26      <NA>    2512291       EGIB         06       <NA>
       jpt_kod_01 id_bufora_ id_bufor01 id_technic jpt_opis jpt_sps_ko gra_ids
241240       <NA>      13890         NA     829365     <NA>        UZG    <NA>
241322       <NA>      13890         NA     829365     <NA>        UZG    <NA>
241859       <NA>      13890         NA     829365     <NA>        UZG    <NA>
241965       <NA>      13890         NA     829365     <NA>        UZG    <NA>
241985       <NA>      13890         NA     829365     <NA>        UZG    <NA>
241991       <NA>      13890         NA     829365     <NA>        UZG    <NA>
       status_obi opis_bledu typ_bledu
241240   AKTUALNY       <NA>      <NA>
241322   AKTUALNY       <NA>      <NA>
241859   AKTUALNY       <NA>      <NA>
241965   AKTUALNY       <NA>      <NA>
241985   AKTUALNY       <NA>      <NA>
241991   AKTUALNY       <NA>      <NA>

> # cutting grid to regional contour
> pop.grid.lub<-pop.grid[lim$jpt_nazwa_=="lubelskie", ]

> class(pop.grid.lub) # sp class
[1] "SpatialPolygons"
attr(,"package")
[1] "sp"

> length(pop.grid.lub)
[1] 25753

> ## grid data limited as grid shapefile
> pop.df.lub<-pop.df[a, ]

> # Fig.5.10a - administrative contour and grid
> plot(pop.grid.lub)

> plot(voi.lub, add=TRUE, border="red")

> # Figure - values of the examined variable - the whole province
> library(GISTools)

> choropleth(pop.grid.lub, pop.df.lub$TOT)

> plot(voi.lub, add=TRUE)

> # Fig.5.10b - values of the examined variable - zoomed district 
> library(GISTools)

> plot(pov[pov$jpt_nazwa_=="powiat Lublin",])

> choropleth(pop.grid.lub, pop.df.lub$TOT, add=TRUE)

> plot(pov[pov$jpt_nazwa_=="powiat Lublin",], add=TRUE, lwd=2)

> ### RSB cannot reproduce pp. 272-274
> 
> ## assignment and aggregation of point data according by grid cells
> #data reminder - points from REGON
> .... [TRUNCATED] 

> library(rgdal)

> # loading data
> data<-read.csv("data_nts4_2019.csv", header=TRUE, dec=",", sep=";")

> pov<-readOGR(".", "powiaty", stringsAsFactors=TRUE, integer64="allow.loss") # 380 units 
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
Warning: OGR support is provided by the sf and terra packages among others
OGR data source with driver: ESRI Shapefile 
Source: "/home/rsb/presentations/kk_spatial_book", layer: "powiaty"
with 380 features
It has 29 fields

> pov<- spTransform(pov, CRS("OGC:CRS84"))
Warning: PROJ support is provided by the sf and terra packages among others

> # creating variables as described
> data$y<-data$XA14

> data$x1<-data$XA08/data$XA09

> data$x2<-data$XA13

> data$x4<-(data$XA18+data$XA19+data$XA20)/data$XA15

> data$x5<-data$XA16/data$XA15

> data$x6<-data$XA15/data$XA06

> data$x8<-data$XA21

> # variables based on periodic average
> a1<-data$XA05/data$XA06 # variable for analysis

> a2<-aggregate(a1, by=list(data$year), mean, na.rm=TRUE)

> a3<-rep(a2$x, each=380) # periodic average assigned to observations

> data$x3<-a1/a3 # variable index (Poland = 100%)

> b2<-aggregate(data$XA10, by=list(data$year), mean, na.rm=TRUE)

> b3<-rep(b2$x, each=380)

> data$x7<-data$XA10/b3

> # standardization of variables according to temporal parameters (µ, σ) 
> library(doBy)

> data$y.sc<-transformBy(~year, data=data, y=scale(y))$y

> data$x1.sc<-transformBy(~year, data=data, x1=scale(x1))$x1

> data$x2.sc<-transformBy(~year, data=data, x2=scale(x2))$x2

> data$x3.sc<-transformBy(~year, data=data, x3=scale(x3))$x3

> data$x4.sc<-transformBy(~year, data=data, x4=scale(x4))$x4

> data$x5.sc<-transformBy(~year, data=data, x5=scale(x5))$x5

> data$x6.sc<-transformBy(~year, data=data, x6=scale(x6))$x6

> data$x7.sc<-transformBy(~year, data=data, x7=scale(x7))$x7

> data$x8.sc<-transformBy(~year, data=data, x8=scale(x8))$x7

> # changing the order of variables (No. 1 region, No. 2 year)
> data<-data[,c(1, 9, 2:8, 10:51)] 

> # contiguity spatial weights matrix
> cont.nb<-poly2nb(as(pov, "SpatialPolygons"))

> cont.listw<-nb2listw(cont.nb, style="W")

> # matrix W according to the inverse criterion 
> crds<-coordinates(pov)

> pov.knn<-knearneigh(crds, k=379) # knn=380-1, there are 380 counties
Warning in knearneigh(crds, k = 379) :
  k greater than one-third of the number of data points

> pov.nb<-knn2nb(pov.knn)

> dist<-nbdists(pov.nb, crds)  

> dist1<-lapply(dist, function(x) 1/x)  # slat class object

> dist.listw<-nb2listw(pov.nb, glist=dist1)  # listw class object

> library(splm) 

Attaching package: 'splm'

The following object is masked from 'package:spatialreg':

    impacts


> # model with permanent effects (FE), this is the SAC model
> # there are lambda coefficients (spatial lag y)
> # rho coefficients (spatial lag of er .... [TRUNCATED] 

> model.spml<-spml(eq1, data=data, listw=cont.listw, model="within", spatial.error="b", lag=TRUE, effect="individual", rel.tol=2e-40)

> options(scipen=999, digits=2)

> summary(model.spml) 
Spatial panel fixed effects sarar model
 

Call:
spml(formula = eq1, data = data, listw = cont.listw, model = "within", 
    effect = "individual", lag = TRUE, spatial.error = "b", rel.tol = 0.0000000000000000000000000000000000000002)

Residuals:
     Min.   1st Qu.    Median   3rd Qu.      Max. 
-13.87206  -1.22670  -0.00539   1.18006  19.75253 

Spatial error parameter:
    Estimate Std. Error t-value            Pr(>|t|)    
rho  -0.4774     0.0501   -9.53 <0.0000000000000002 ***

Spatial autoregressive coefficient:
       Estimate Std. Error t-value            Pr(>|t|)    
lambda   0.5185     0.0361    14.4 <0.0000000000000002 ***

Coefficients:
    Estimate Std. Error t-value             Pr(>|t|)    
x1 -1.184415   0.113792  -10.41 < 0.0000000000000002 ***
x2 -0.001627   0.000402   -4.05          0.000050934 ***
x3  0.359111   0.088818    4.04          0.000052725 ***
x4 -5.693622   1.637570   -3.48              0.00051 ***
x5 -7.134217   1.190050   -5.99          0.000000002 ***
x6  9.890663   2.330517    4.24          0.000021959 ***
x7  0.346749   0.274777    1.26              0.20697    
x8  0.045371   0.010792    4.20          0.000026188 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1


> eff<-effects(model.spml) # fixed effects

> eff

Intercept:
            Estimate Std. Error t-value            Pr(>|t|)    
(Intercept)     48.5        1.5    32.4 <0.0000000000000002 ***


Spatial fixed effects:
    Estimate Std. Error t-value             Pr(>|t|)    
1    -8.4189     1.5323   -5.49  0.00000003926353141 ***
2    -3.7549     1.6617   -2.26              0.02384 *  
3    -6.1596     1.5826   -3.89  0.00009944455954065 ***
4    -2.0936     1.5446   -1.36              0.17528    
5    -3.4361     1.5653   -2.20              0.02815 *  
6    -4.3420     1.5718   -2.76              0.00574 ** 
7     3.6600     1.5662    2.34              0.01945 *  
8    -8.9728     1.6018   -5.60  0.00000002123598170 ***
9    -0.1270     1.5166   -0.08              0.93324    
10    3.3122     1.7549    1.89              0.05910 .  
11   -7.3558     2.1423   -3.43              0.00060 ***
12   14.7323     2.4202    6.09  0.00000000114905793 ***
13    0.7400     2.1007    0.35              0.72463    
14   -7.7563     1.8334   -4.23  0.00002331239437848 ***
15   -1.0136     1.7113   -0.59              0.55363    
16   21.4642     1.6152   13.29 < 0.0000000000000002 ***
17    2.1813     1.6207    1.35              0.17835    
18   -0.9000     1.5951   -0.56              0.57259    
19   -0.1041     1.6917   -0.06              0.95091    
20    5.0308     1.9644    2.56              0.01044 *  
21   -2.8182     1.5566   -1.81              0.07022 .  
22    0.7539     1.6139    0.47              0.64039    
23   22.5397     2.0166   11.18 < 0.0000000000000002 ***
24    1.1239     1.6343    0.69              0.49166    
25   -3.4419     1.6353   -2.10              0.03531 *  
26   -4.4901     1.5859   -2.83              0.00464 ** 
27  -10.6856     1.5380   -6.95  0.00000000000371433 ***
28   -7.9147     1.6209   -4.88  0.00000104460586559 ***
29   -9.7090     1.5532   -6.25  0.00000000040773473 ***
30   -5.5282     1.5721   -3.52              0.00044 ***
31   -2.3466     1.5628   -1.50              0.13323    
32   -2.6969     1.6164   -1.67              0.09521 .  
33    9.2016     1.7143    5.37  0.00000007976920210 ***
34   -6.3240     1.5713   -4.02  0.00005707641514079 ***
35   11.5500     1.9794    5.83  0.00000000538090711 ***
36   -4.9573     1.5886   -3.12              0.00181 ** 
37   -0.9973     1.6900   -0.59              0.55512    
38    7.0600     1.6577    4.26  0.00002052988944965 ***
39   -0.0396     1.5523   -0.03              0.97965    
40   -5.7365     1.6193   -3.54              0.00040 ***
41   10.1208     1.7727    5.71  0.00000001135509250 ***
42    6.8364     1.6872    4.05  0.00005080177380514 ***
43   24.8479     1.5347   16.19 < 0.0000000000000002 ***
44   -5.6924     1.6440   -3.46              0.00053 ***
45    4.7675     1.8681    2.55              0.01071 *  
46   -0.9869     1.7002   -0.58              0.56159    
47    1.3847     1.7177    0.81              0.42018    
48   -2.8811     1.6563   -1.74              0.08194 .  
49   -5.7861     1.6329   -3.54              0.00039 ***
50   -7.3919     1.6402   -4.51  0.00000658179770465 ***
51   -1.2777     1.6728   -0.76              0.44497    
52   -8.7614     1.6265   -5.39  0.00000007178024347 ***
53   -0.6621     1.6657   -0.40              0.69100    
54   -4.8033     1.7244   -2.79              0.00535 ** 
55   -3.1112     1.6034   -1.94              0.05234 .  
56   -8.4618     1.5876   -5.33  0.00000009819927427 ***
57   -9.3621     1.6086   -5.82  0.00000000588656146 ***
58   -7.9029     1.6167   -4.89  0.00000101635996956 ***
59   46.5278     1.6108   28.89 < 0.0000000000000002 ***
60   -6.8640     1.6349   -4.20  0.00002689476229989 ***
61   -5.7771     1.6525   -3.50              0.00047 ***
62   -8.7024     1.6207   -5.37  0.00000007889764602 ***
63   10.8823     1.6134    6.74  0.00000000001531558 ***
64   -1.3206     1.6357   -0.81              0.41945    
65   -9.6459     1.5862   -6.08  0.00000000119289780 ***
66   -0.4080     1.4571   -0.28              0.77947    
67   -5.6485     1.6596   -3.40              0.00067 ***
68    7.7643     2.0417    3.80              0.00014 ***
69   -9.0065     1.6128   -5.58  0.00000002346667742 ***
70  -10.0304     1.6051   -6.25  0.00000000041308698 ***
71   11.4103     2.5698    4.44  0.00000898987636297 ***
72   -1.1269     2.1928   -0.51              0.60733    
73    9.3391     2.4626    3.79              0.00015 ***
74   -5.6708     1.5945   -3.56              0.00038 ***
75    1.2832     1.5842    0.81              0.41796    
76   -3.2279     1.4961   -2.16              0.03097 *  
77   -3.8742     1.6383   -2.36              0.01804 *  
78   -4.0675     1.6075   -2.53              0.01140 *  
79   11.8036     1.6224    7.28  0.00000000000034594 ***
80   -3.9025     1.6411   -2.38              0.01741 *  
81   -7.5961     1.7158   -4.43  0.00000954518810044 ***
82   -4.1350     1.6285   -2.54              0.01111 *  
83   -3.2620     1.6003   -2.04              0.04151 *  
84   -5.9463     1.6359   -3.63              0.00028 ***
85    2.5333     1.5705    1.61              0.10673    
86   -0.6580     1.5214   -0.43              0.66539    
87   -4.1469     1.7232   -2.41              0.01610 *  
88   -2.4108     1.5765   -1.53              0.12621    
89   -7.2386     1.5556   -4.65  0.00000326690002477 ***
90    6.8795     1.9420    3.54              0.00040 ***
91  -10.5410     1.5823   -6.66  0.00000000002702788 ***
92    4.6951     2.0892    2.25              0.02462 *  
93    1.3781     1.6061    0.86              0.39088    
94   16.0900     2.6437    6.09  0.00000000115616714 ***
95   -1.6089     2.1421   -0.75              0.45261    
96   -8.2032     1.9428   -4.22  0.00002418007803344 ***
97   -3.7385     1.9732   -1.89              0.05814 .  
98   49.5015     1.6885   29.32 < 0.0000000000000002 ***
99   -0.7186     1.5625   -0.46              0.64557    
100 -16.2564     1.5454  -10.52 < 0.0000000000000002 ***
101  -0.4743     1.6330   -0.29              0.77147    
102  -5.5036     1.6144   -3.41              0.00065 ***
103  -7.5753     1.6256   -4.66  0.00000316150332858 ***
104  -3.6559     1.5622   -2.34              0.01927 *  
105  -9.1114     1.5146   -6.02  0.00000000179078189 ***
106  -1.9141     1.5332   -1.25              0.21187    
107 -11.5991     1.5876   -7.31  0.00000000000027513 ***
108   6.6821     1.6126    4.14  0.00003418705360007 ***
109 -14.3503     1.5393   -9.32 < 0.0000000000000002 ***
110  -6.6044     1.6775   -3.94  0.00008247628668367 ***
111  -1.5167     1.6519   -0.92              0.35854    
112  -5.0983     1.6020   -3.18              0.00146 ** 
113  -4.9564     1.5436   -3.21              0.00132 ** 
114 -10.3735     1.6031   -6.47  0.00000000009730212 ***
115  -7.1260     1.5242   -4.68  0.00000293706741133 ***
116  -9.9750     1.5298   -6.52  0.00000000007011130 ***
117   0.8748     1.5513    0.56              0.57279    
118 -14.6541     1.6021   -9.15 < 0.0000000000000002 ***
119  10.6232     2.5322    4.20  0.00002725855020599 ***
120   3.9904     1.5615    2.56              0.01061 *  
121  -5.5334     1.5621   -3.54              0.00040 ***
122   6.0362     2.3064    2.62              0.00887 ** 
123  -2.3283     2.1123   -1.10              0.27035    
124   8.0700     1.5511    5.20  0.00000019622046606 ***
125   2.0126     1.6510    1.22              0.22282    
126  -0.7211     1.6221   -0.44              0.65665    
127  -3.0008     1.4961   -2.01              0.04489 *  
128   2.0523     1.8648    1.10              0.27109    
129  -0.0341     1.5014   -0.02              0.98190    
130 -12.3912     1.6342   -7.58  0.00000000000003394 ***
131  -4.0070     1.6436   -2.44              0.01477 *  
132 -10.2471     1.5832   -6.47  0.00000000009642755 ***
133  -3.8667     1.6304   -2.37              0.01771 *  
134   0.8587     1.7473    0.49              0.62312    
135  -1.3705     1.6037   -0.85              0.39278    
136   2.6467     1.6322    1.62              0.10489    
137  -7.9981     1.6262   -4.92  0.00000087284142964 ***
138  -1.2208     1.6150   -0.76              0.44970    
139  -6.8146     1.5072   -4.52  0.00000614465573733 ***
140   1.0767     1.5806    0.68              0.49576    
141  -6.5534     1.6900   -3.88              0.00011 ***
142  -8.0452     1.5568   -5.17  0.00000023702968626 ***
143   0.0928     1.5586    0.06              0.95253    
144  -5.3369     1.6593   -3.22              0.00130 ** 
145  -0.8326     1.5958   -0.52              0.60186    
146  -4.4259     1.4856   -2.98              0.00289 ** 
147  -0.5726     1.5729   -0.36              0.71583    
148   8.5163     2.2276    3.82              0.00013 ***
149   8.1775     1.6941    4.83  0.00000138508089059 ***
150  12.5797     2.2223    5.66  0.00000001507008765 ***
151  42.5454     3.3484   12.71 < 0.0000000000000002 ***
152   1.3290     1.6073    0.83              0.40830    
153   0.4505     1.5780    0.29              0.77527    
154  -3.5132     1.5908   -2.21              0.02722 *  
155  -1.7998     1.5218   -1.18              0.23692    
156   9.8751     1.6150    6.11  0.00000000096823819 ***
157  -7.6347     1.5970   -4.78  0.00000174856806442 ***
158  -1.5443     1.5192   -1.02              0.30937    
159  16.6704     2.3236    7.17  0.00000000000072585 ***
160  -5.7978     1.5689   -3.70              0.00022 ***
161  15.9588     1.4226   11.22 < 0.0000000000000002 ***
162   6.2892     1.6812    3.74              0.00018 ***
163   8.5014     2.4908    3.41              0.00064 ***
164   1.8816     1.5286    1.23              0.21835    
165  -1.0326     1.5096   -0.68              0.49394    
166  -1.0041     1.5872   -0.63              0.52697    
167  -4.6339     1.4221   -3.26              0.00112 ** 
168  -7.8245     1.5338   -5.10  0.00000033702561991 ***
169  16.7256     1.5690   10.66 < 0.0000000000000002 ***
170   4.0958     1.5662    2.62              0.00892 ** 
171  34.6836     2.0412   16.99 < 0.0000000000000002 ***
172  -1.2126     1.6898   -0.72              0.47300    
173  -6.2234     1.6760   -3.71              0.00020 ***
174  -7.4395     1.5949   -4.66  0.00000309145408051 ***
175   0.0225     1.6696    0.01              0.98927    
176  -4.8580     1.7747   -2.74              0.00619 ** 
177  -4.6743     1.6308   -2.87              0.00415 ** 
178   5.7641     1.5970    3.61              0.00031 ***
179  -3.5548     1.6446   -2.16              0.03066 *  
180   0.9204     2.0123    0.46              0.64738    
181   4.4610     1.9170    2.33              0.01996 *  
182   7.5479     1.6049    4.70  0.00000256497128631 ***
183   1.0893     1.5808    0.69              0.49076    
184   4.1005     1.6128    2.54              0.01101 *  
185  -9.2329     2.3077   -4.00  0.00006310260601762 ***
186 -21.7443     1.6058  -13.54 < 0.0000000000000002 ***
187   7.4288     1.5307    4.85  0.00000121483666907 ***
188  10.6291     1.5820    6.72  0.00000000001832046 ***
189  -6.0881     1.5232   -4.00  0.00006418002784596 ***
190  -3.9605     1.6348   -2.42              0.01541 *  
191  -8.1094     1.6874   -4.81  0.00000154136688347 ***
192  -5.3821     1.5880   -3.39              0.00070 ***
193   0.2079     1.9128    0.11              0.91343    
194  -4.1342     1.6210   -2.55              0.01076 *  
195   4.7198     1.5495    3.05              0.00232 ** 
196  -1.7445     1.6604   -1.05              0.29340    
197  -2.9064     1.5898   -1.83              0.06753 .  
198   9.0344     2.7606    3.27              0.00107 ** 
199  -7.9264     1.5336   -5.17  0.00000023622253079 ***
200  -3.6774     1.5766   -2.33              0.01968 *  
201   9.7504     1.5474    6.30  0.00000000029510350 ***
202  -6.1386     2.3083   -2.66              0.00783 ** 
203  10.5626     1.5706    6.73  0.00000000001754229 ***
204  -6.4152     1.6332   -3.93  0.00008563072827621 ***
205   6.6340     1.8960    3.50              0.00047 ***
206 -10.4687     1.6795   -6.23  0.00000000045696168 ***
207  -8.4105     1.7489   -4.81  0.00000151686703271 ***
208  -2.8395     1.5835   -1.79              0.07294 .  
209 -11.6806     1.6363   -7.14  0.00000000000094353 ***
210   8.0496     1.5769    5.10  0.00000033113304409 ***
211  -5.0042     1.6043   -3.12              0.00181 ** 
212  21.0925     2.6430    7.98  0.00000000000000146 ***
213  -0.4368     1.6685   -0.26              0.79349    
214 -12.2953     1.5281   -8.05  0.00000000000000085 ***
215  -8.1038     1.6089   -5.04  0.00000047317686978 ***
216  -1.1115     1.5276   -0.73              0.46682    
217  -6.7434     1.5812   -4.26  0.00002001901047586 ***
218  -4.4144     1.6734   -2.64              0.00834 ** 
219   6.4388     1.8005    3.58              0.00035 ***
220   3.0205     1.7271    1.75              0.08031 .  
221  -7.7777     1.6264   -4.78  0.00000173395616052 ***
222   0.3227     1.5857    0.20              0.83873    
223  -2.9881     1.7729   -1.69              0.09190 .  
224  -2.0177     1.5169   -1.33              0.18346    
225   9.0716     2.3469    3.87              0.00011 ***
226  -5.1427     1.4442   -3.56              0.00037 ***
227   6.1579     1.6115    3.82              0.00013 ***
228  -3.2966     1.4911   -2.21              0.02705 *  
229  14.6645     2.7717    5.29  0.00000012180677983 ***
230  -6.8970     1.6169   -4.27  0.00001992531133549 ***
231  -0.5678     1.6288   -0.35              0.72741    
232  -3.7367     1.6376   -2.28              0.02250 *  
233  -2.2562     1.5660   -1.44              0.14964    
234   0.5965     2.4191    0.25              0.80523    
235   4.8644     1.5890    3.06              0.00220 ** 
236   3.1394     1.5885    1.98              0.04812 *  
237  -6.0522     1.6570   -3.65              0.00026 ***
238  -0.9994     1.6837   -0.59              0.55278    
239  -3.7880     1.6880   -2.24              0.02483 *  
240   0.8462     1.6688    0.51              0.61211    
241   5.9223     1.6658    3.56              0.00038 ***
242  -0.6849     1.5829   -0.43              0.66525    
243   4.8319     1.6262    2.97              0.00296 ** 
244  -7.6111     1.5556   -4.89  0.00000099444659257 ***
245  -6.2411     1.5446   -4.04  0.00005334039599557 ***
246  -5.8107     1.4940   -3.89              0.00010 ***
247  -0.0315     1.6262   -0.02              0.98456    
248  18.9867     2.5993    7.30  0.00000000000027821 ***
249   0.1810     1.6673    0.11              0.91355    
250  -6.2925     1.4331   -4.39  0.00001129147293196 ***
251  -7.5012     1.4840   -5.05  0.00000043122024069 ***
252  -6.4383     1.6255   -3.96  0.00007473403925414 ***
253  -1.1515     1.6376   -0.70              0.48195    
254  -9.7279     1.5305   -6.36  0.00000000020714027 ***
255  -7.6875     1.5033   -5.11  0.00000031580891638 ***
256  -6.4901     1.5222   -4.26  0.00002011975166062 ***
257  -4.9562     1.6307   -3.04              0.00237 ** 
258  -8.6881     1.5026   -5.78  0.00000000738630235 ***
259  -9.9324     1.4969   -6.64  0.00000000003241009 ***
260  -1.5052     1.5863   -0.95              0.34269    
261   2.2447     1.5346    1.46              0.14355    
262  -1.2318     1.5934   -0.77              0.43950    
263  -4.8148     1.5371   -3.13              0.00173 ** 
264  -0.6667     1.5589   -0.43              0.66889    
265   6.6887     1.9450    3.44              0.00058 ***
266   0.3379     1.6213    0.21              0.83490    
267  -3.6741     1.4579   -2.52              0.01173 *  
268  11.9770     2.0076    5.97  0.00000000243514256 ***
269  -5.0905     1.4793   -3.44              0.00058 ***
270  -5.6831     1.6670   -3.41              0.00065 ***
271  -7.4895     1.5521   -4.83  0.00000139736891924 ***
272  -0.4514     1.6959   -0.27              0.79013    
273  -6.1624     1.6224   -3.80              0.00015 ***
274  12.7683     1.5863    8.05  0.00000000000000083 ***
275  -5.0944     2.4015   -2.12              0.03389 *  
276 -11.8787     3.1584   -3.76              0.00017 ***
277   1.3744     1.9885    0.69              0.48946    
278   5.3055     2.2241    2.39              0.01706 *  
279  -9.4501     1.7738   -5.33  0.00000009954238866 ***
280  -1.6955     1.5285   -1.11              0.26733    
281  -8.6854     1.6205   -5.36  0.00000008341819553 ***
282 -11.8628     1.6668   -7.12  0.00000000000110095 ***
283  -5.8793     1.9074   -3.08              0.00205 ** 
284  -8.9288     1.5615   -5.72  0.00000001076418156 ***
285  -4.8743     1.6532   -2.95              0.00319 ** 
286   5.4609     1.9975    2.73              0.00626 ** 
287  13.4246     2.4391    5.50  0.00000003713713138 ***
288  -2.2720     1.6170   -1.41              0.16000    
289  -1.2072     1.6923   -0.71              0.47565    
290  -3.8790     1.5089   -2.57              0.01015 *  
291  -2.1005     1.6043   -1.31              0.19043    
292  -0.6793     1.5865   -0.43              0.66850    
293   0.8816     1.5882    0.56              0.57884    
294  -7.2821     1.5680   -4.64  0.00000341656361209 ***
295  -4.6953     1.7907   -2.62              0.00874 ** 
296  -5.3061     1.8723   -2.83              0.00460 ** 
297   4.9473     1.6232    3.05              0.00230 ** 
298   3.1874     1.9702    1.62              0.10570    
299   5.2401     2.1323    2.46              0.01399 *  
300  16.0080     2.2368    7.16  0.00000000000082655 ***
301 -12.9426     1.5748   -8.22 < 0.0000000000000002 ***
302  -5.8098     1.5984   -3.63              0.00028 ***
303   8.0573     1.5387    5.24  0.00000016366193660 ***
304  27.6902     2.3356   11.86 < 0.0000000000000002 ***
305  18.1114     2.3203    7.81  0.00000000000000593 ***
306   7.1084     1.6082    4.42  0.00000986749604047 ***
307  -8.7147     2.3500   -3.71              0.00021 ***
308 -13.5607     1.4656   -9.25 < 0.0000000000000002 ***
309  -7.2928     1.4350   -5.08  0.00000037357989996 ***
310  -0.0949     1.5625   -0.06              0.95159    
311  -3.9035     1.5668   -2.49              0.01272 *  
312  -6.3325     1.4987   -4.23  0.00002385600418250 ***
313  -8.9883     1.6316   -5.51  0.00000003610618729 ***
314   2.3046     1.5920    1.45              0.14772    
315  -4.4830     1.4401   -3.11              0.00185 ** 
316  -2.9858     1.6697   -1.79              0.07374 .  
317  -8.3308     1.4951   -5.57  0.00000002519229546 ***
318 -21.1611     1.4690  -14.41 < 0.0000000000000002 ***
319   0.7264     1.4992    0.48              0.62802    
320  14.7450     1.4855    9.93 < 0.0000000000000002 ***
321  66.6407     1.6253   41.00 < 0.0000000000000002 ***
322  -4.1440     2.8913   -1.43              0.15178    
323  10.4444     2.1114    4.95  0.00000075492064988 ***
324   0.9280     2.4114    0.38              0.70034    
325  20.7147     1.6603   12.48 < 0.0000000000000002 ***
326   6.1356     1.9968    3.07              0.00212 ** 
327  21.2766     2.0901   10.18 < 0.0000000000000002 ***
328  -1.2520     1.7592   -0.71              0.47665    
329  39.9311     2.5596   15.60 < 0.0000000000000002 ***
330  29.9285     1.5742   19.01 < 0.0000000000000002 ***
331  -9.6491     1.7134   -5.63  0.00000001785895352 ***
332   5.9910     1.7780    3.37              0.00075 ***
333  -3.4669     1.5589   -2.22              0.02615 *  
334  16.6570     1.7378    9.59 < 0.0000000000000002 ***
335   8.9771     1.6186    5.55  0.00000002917528642 ***
336  -1.6885     2.2426   -0.75              0.45148    
337  -3.3236     1.7050   -1.95              0.05126 .  
338  -2.6959     1.5120   -1.78              0.07459 .  
339  -3.5022     1.5160   -2.31              0.02088 *  
340  -2.3062     1.6888   -1.37              0.17206    
341   0.2428     1.5843    0.15              0.87817    
342  -8.0971     1.6228   -4.99  0.00000060498187279 ***
343  -1.0497     1.6023   -0.66              0.51238    
344   7.3094     1.7347    4.21  0.00002511413374417 ***
345  -2.0673     1.5546   -1.33              0.18358    
346  -1.7141     1.5635   -1.10              0.27295    
347  -2.7926     1.5409   -1.81              0.06994 .  
348  -6.0977     1.6587   -3.68              0.00024 ***
349   6.3786     1.7717    3.60              0.00032 ***
350  -2.7180     1.5678   -1.73              0.08298 .  
351  -4.6923     1.5243   -3.08              0.00208 ** 
352   0.6714     1.6199    0.41              0.67853    
353   1.4737     1.5512    0.95              0.34208    
354   4.0678     1.7709    2.30              0.02162 *  
355   3.4253     1.4867    2.30              0.02123 *  
356  -4.3372     1.5594   -2.78              0.00541 ** 
357   1.9103     1.5597    1.22              0.22067    
358   1.0937     1.5427    0.71              0.47837    
359 -11.1688     1.5246   -7.33  0.00000000000023791 ***
360  86.0538     1.6917   50.87 < 0.0000000000000002 ***
361  -4.2911     1.5141   -2.83              0.00459 ** 
362  -7.6080     1.6293   -4.67  0.00000302028685354 ***
363  -2.3145     1.5286   -1.51              0.13000    
364  -4.9636     1.5378   -3.23              0.00125 ** 
365  -8.7708     1.5638   -5.61  0.00000002039070737 ***
366   1.9120     1.5270    1.25              0.21051    
367  -7.5920     1.5594   -4.87  0.00000112470306798 ***
368  -8.3275     1.6033   -5.19  0.00000020580429742 ***
369   8.8600     2.3063    3.84              0.00012 ***
370  -4.6603     1.5793   -2.95              0.00317 ** 
371  -9.0106     1.9906   -4.53  0.00000599530979554 ***
372  14.3188     2.2464    6.37  0.00000000018399060 ***
373   5.9984     1.9025    3.15              0.00162 ** 
374  -7.9267     1.6394   -4.84  0.00000132966732307 ***
375  -3.7346     1.6414   -2.28              0.02289 *  
376  -4.7687     1.5564   -3.06              0.00218 ** 
377  -8.9321     1.5596   -5.73  0.00000001021278207 ***
378  -5.2281     1.5027   -3.48              0.00050 ***
379   4.0700     1.6331    2.49              0.01270 *  
380   3.4867     1.5794    2.21              0.02728 *  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

> attributes(eff) # attributes of specific effects object
$names
[1] "INTTable" "SETable"  "effects" 

$class
[1] "effects.splm"


> plot(density(eff$SETable[,1])) # specific effect density distribution

> library(GISTools)

> choropleth(pov, eff$SETable[,1], main="Fixed effects") # fixed effects mapped

> shades<-auto.shading(eff$SETable[,1])

> choro.legend(14, 50.25, shades, cex=0.65, bty="n")

> # equation for scaled variables
> eq1.sc<-y.sc~ x1.sc+ x2.sc+ x3.sc+ x4.sc+ x5.sc+ x6.sc+ x7.sc+ x8.sc

> model.spml<-spml(eq1.sc, data=data, listw=cont.listw, model="within", spatial.error="b", lag=TRUE, effect="individual", rel.tol=2e-40)

> options(scipen=999, digits=2)

> summary(model.spml) 
Spatial panel fixed effects sarar model
 

Call:
spml(formula = eq1.sc, data = data, listw = cont.listw, model = "within", 
    effect = "individual", lag = TRUE, spatial.error = "b", rel.tol = 0.0000000000000000000000000000000000000002)

Residuals:
    Min.  1st Qu.   Median  3rd Qu.     Max. 
-1.11463 -0.10091 -0.00162  0.09100  1.48698 

Spatial error parameter:
    Estimate Std. Error t-value Pr(>|t|)   
rho   0.2647     0.0868    3.05   0.0023 **

Spatial autoregressive coefficient:
       Estimate Std. Error t-value Pr(>|t|)  
lambda   -0.191      0.098   -1.94    0.052 .

Coefficients:
      Estimate Std. Error t-value         Pr(>|t|)    
x1.sc -0.07113    0.01056   -6.74 0.00000000001627 ***
x2.sc -0.00601    0.02137   -0.28          0.77835    
x3.sc  0.01547    0.00402    3.85          0.00012 ***
x4.sc -0.06647    0.02294   -2.90          0.00376 ** 
x5.sc -0.14260    0.02378   -6.00 0.00000000201694 ***
x6.sc  0.04005    0.01492    2.68          0.00729 ** 
x7.sc -3.90307    0.55373   -7.05 0.00000000000181 ***
x8.sc  2.22776    0.30884    7.21 0.00000000000055 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1


> # BSJK test - version C1 (conditional) 
> bsjktest(eq1, data=data, listw=cont.listw, test="C.1")

	Baltagi, Song, Jung and Koh C.1 conditional test

data:  y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8
LM = 18, df = 1, p-value = 0.00002
alternative hypothesis: spatial dependence in error terms, sub RE and serial corr.


> # test BSJK – wersja J (join, łączna)
> bsjktest(eq1, data=data, listw=cont.listw, test="J")

	Baltagi, Song, Jung and Koh joint test (J)

data:  y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8
LM = 21063, df = 3, p-value <0.0000000000000002
alternative hypothesis: random effects or serial corr. or spatial dependence in error terms


> bsktest(eq1, data=data, listw=cont.listw, test="LMH", standardize=TRUE)

	Baltagi, Song and Koh LM-H one-sided joint test

data:  y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8
LM-H = 21048, p-value <0.0000000000000002
alternative hypothesis: Random Regional Effects and Spatial autocorrelation


> bsktest(eq1, data=data, listw=cont.listw, test="LM1", standardize=TRUE)

	Baltagi, Song and Koh SLM1 marginal test

data:  y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8
SLM1 = 146, p-value <0.0000000000000002
alternative hypothesis: Random effects


> bsktest(eq1, data=data, listw=cont.listw, test="LM2", standardize=TRUE)

	Baltagi, Song and Koh LM2 marginal test

data:  y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8
SLM2 = 14, p-value <0.0000000000000002
alternative hypothesis: Spatial autocorrelation


> sphtest(eq1, data=data, listw=cont.listw, spatial.model="error", method="GM")

	Hausman test for spatial models

data:  x
chisq = NA, df = 8, p-value = NA
alternative hypothesis: one model is inconsistent


> # impacts with simulation
> W.c<-as(as_dgRMatrix_listw(cont.listw), "CsparseMatrix")

> trMat<-trW(W.c, type="mult")

> imp<-impacts(model.spml, tr=trMat, R=20000)

> summary(imp)
Impact measures (lag, trace):
      Direct Indirect   Total
x1.sc -0.071  0.01142 -0.0597
x2.sc -0.006  0.00097 -0.0051
x3.sc  0.015 -0.00248  0.0130
x4.sc -0.067  0.01067 -0.0558
x5.sc -0.143  0.02289 -0.1198
x6.sc  0.040 -0.00643  0.0336
x7.sc -3.905  0.62650 -3.2786
x8.sc  2.229 -0.35759  1.8713
========================================================
Simulation results ( variance matrix):
Direct:

Iterations = 1:20000
Thinning interval = 1 
Number of chains = 1 
Sample size per chain = 20000 

1. Empirical mean and standard deviation for each variable,
   plus standard error of the mean:

          Mean      SD  Naive SE Time-series SE
x1.sc -0.07111 0.01063 0.0000752      0.0000752
x2.sc -0.00618 0.02141 0.0001514      0.0001514
x3.sc  0.01548 0.00403 0.0000285      0.0000285
x4.sc -0.06661 0.02304 0.0001629      0.0001658
x5.sc -0.14286 0.02404 0.0001700      0.0001700
x6.sc  0.04011 0.01486 0.0001051      0.0001051
x7.sc -3.90087 0.55435 0.0039199      0.0039199
x8.sc  2.22656 0.30878 0.0021834      0.0021834

2. Quantiles for each variable:

          2.5%     25%      50%      75%   97.5%
x1.sc -0.09179 -0.0783 -0.07118 -0.06390 -0.0503
x2.sc -0.04794 -0.0204 -0.00614  0.00828  0.0356
x3.sc  0.00769  0.0127  0.01554  0.01820  0.0234
x4.sc -0.11195 -0.0821 -0.06657 -0.05109 -0.0210
x5.sc -0.19026 -0.1590 -0.14281 -0.12661 -0.0958
x6.sc  0.01067  0.0302  0.04015  0.05006  0.0694
x7.sc -4.98936 -4.2806 -3.90229 -3.52243 -2.8164
x8.sc  1.62338  2.0161  2.22737  2.43732  2.8301

========================================================
Indirect:

Iterations = 1:20000
Thinning interval = 1 
Number of chains = 1 
Sample size per chain = 20000 

1. Empirical mean and standard deviation for each variable,
   plus standard error of the mean:

           Mean      SD   Naive SE Time-series SE
x1.sc  0.011019 0.00538 0.00003807     0.00003807
x2.sc  0.000966 0.00368 0.00002599     0.00002599
x3.sc -0.002401 0.00130 0.00000919     0.00000919
x4.sc  0.010334 0.00620 0.00004383     0.00004383
x5.sc  0.022146 0.01100 0.00007778     0.00007778
x6.sc -0.006216 0.00382 0.00002702     0.00002702
x7.sc  0.604350 0.29363 0.00207631     0.00207631
x8.sc -0.344954 0.16720 0.00118228     0.00118228

2. Quantiles for each variable:

            2.5%      25%       50%      75%      97.5%
x1.sc -0.0000386  0.00765  0.011146  0.01457 0.02117808
x2.sc -0.0063083 -0.00106  0.000654  0.00298 0.00895770
x3.sc -0.0050893 -0.00322 -0.002348 -0.00153 0.00000981
x4.sc -0.0002203  0.00598  0.009883  0.01414 0.02382124
x5.sc -0.0000625  0.01517  0.022251  0.02942 0.04333726
x6.sc -0.0145599 -0.00857 -0.005886 -0.00353 0.00014003
x7.sc -0.0021414  0.42101  0.613195  0.79916 1.15613335
x8.sc -0.6578806 -0.45565 -0.350664 -0.24052 0.00119938

========================================================
Total:

Iterations = 1:20000
Thinning interval = 1 
Number of chains = 1 
Sample size per chain = 20000 

1. Empirical mean and standard deviation for each variable,
   plus standard error of the mean:

          Mean      SD  Naive SE Time-series SE
x1.sc -0.06010 0.01034 0.0000731      0.0000731
x2.sc -0.00522 0.01816 0.0001284      0.0001284
x3.sc  0.01308 0.00358 0.0000253      0.0000253
x4.sc -0.05627 0.02006 0.0001419      0.0001450
x5.sc -0.12071 0.02270 0.0001605      0.0001605
x6.sc  0.03390 0.01292 0.0000914      0.0000914
x7.sc -3.29652 0.54619 0.0038621      0.0038621
x8.sc  1.88161 0.30619 0.0021651      0.0021651

2. Quantiles for each variable:

          2.5%     25%      50%      75%   97.5%
x1.sc -0.08159 -0.0667 -0.05972 -0.05299 -0.0409
x2.sc -0.04096 -0.0173 -0.00518  0.00696  0.0300
x3.sc  0.00634  0.0106  0.01304  0.01544  0.0203
x4.sc -0.09657 -0.0694 -0.05599 -0.04277 -0.0177
x5.sc -0.16746 -0.1354 -0.11989 -0.10513 -0.0782
x6.sc  0.00905  0.0252  0.03371  0.04227  0.0599
x7.sc -4.43474 -3.6473 -3.27318 -2.92086 -2.2917
x8.sc  1.31806  1.6709  1.86881  2.07852  2.5200


> sessionInfo()
R version 4.3.1 (2023-06-16)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Fedora Linux 38 (Workstation Edition)

Matrix products: default
BLAS:   /home/rsb/topics/R/R431-share/lib64/R/lib/libRblas.so 
LAPACK: /home/rsb/topics/R/R431-share/lib64/R/lib/libRlapack.so;  LAPACK version 3.11.0

locale:
 [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    
 [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   
 [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       

time zone: Europe/Oslo
tzcode source: system (glibc)

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] splm_1.6-3                 spatstat_3.0-6            
 [3] spatstat.linnet_3.1-1      spatstat.model_3.2-8      
 [5] rpart_4.1.21               spatstat.explore_3.2-5    
 [7] nlme_3.1-163               spatstat.random_3.2-1     
 [9] spatstat.geom_3.2-7        spatstat.data_3.0-1       
[11] clustertend_1.7            cluster_2.1.4             
[13] sampling_2.9               doBy_4.6.19               
[15] Metrics_0.1.4              GISTools_0.7-4            
[17] rgeos_0.6-4                MASS_7.3-60               
[19] RColorBrewer_1.1-3         maptools_1.1-8            
[21] lmtest_0.9-40              rgdal_1.6-7               
[23] sp_2.1-1                   spatialreg_1.2-10         
[25] Matrix_1.6-1.1             spdep_1.2-9               
[27] sf_1.0-14                  spData_2.3.0              
[29] PerformanceAnalytics_2.0.4 xts_0.13.1                
[31] zoo_1.8-12                

loaded via a namespace (and not attached):
 [1] Rdpack_2.5            DBI_1.1.3             deldir_1.0-9         
 [4] s2_1.1.4              sandwich_3.0-2        rlang_1.1.1          
 [7] magrittr_2.0.3        multcomp_1.4-25       e1071_1.7-13         
[10] compiler_4.3.1        mgcv_1.9-0            vctrs_0.6.4          
[13] stringr_1.5.0         quadprog_1.5-8        pkgconfig_2.0.3      
[16] wk_0.9.0              backports_1.4.1       utf8_1.2.4           
[19] miscTools_0.6-28      purrr_1.0.2           goftest_1.2-3        
[22] collapse_2.0.3        spatstat.utils_3.0-4  Deriv_4.1.3          
[25] broom_1.0.5           spDataLarge_2.0.6     parallel_4.3.1       
[28] LearnBayes_2.15.1     R6_2.5.1              stringi_1.7.12       
[31] ibdreg_0.3.8          boot_1.3-28.1         Rcpp_1.0.11          
[34] tensor_1.5            splines_4.3.1         tidyselect_1.2.0     
[37] abind_1.4-5           maxLik_1.5-2          codetools_0.2-19     
[40] lattice_0.22-4        tibble_3.2.1          coda_0.19-4          
[43] foreign_0.8-85        survival_3.5-7        units_0.8-4          
[46] proxy_0.4-27          polyclip_1.10-6       lpSolve_5.6.19       
[49] pillar_1.9.0          KernSmooth_2.23-22    generics_0.1.3       
[52] dbscan_1.1-11         ggplot2_3.4.4         munsell_0.5.0        
[55] scales_1.2.1          class_7.3-22          glue_1.6.2           
[58] tools_4.3.1           dotCall64_1.1-0       mvtnorm_1.2-3        
[61] grid_4.3.1            tidyr_1.3.0           rbibutils_2.2.15     
[64] bdsmatrix_1.3-6       colorspace_2.1-0      Formula_1.2-5        
[67] cli_3.6.1             spatstat.sparse_3.0-2 plm_2.6-3            
[70] spam_2.10-0           fansi_1.0.5           expm_0.999-7         
[73] dplyr_1.1.3           gtable_0.3.4          digest_0.6.33        
[76] classInt_0.4-10       TH.data_1.1-2         lifecycle_1.0.3      
[79] microbenchmark_1.4.10

> sink(type = "message")

> sink()
